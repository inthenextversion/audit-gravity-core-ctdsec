{
  "version": "3.2",
  "log": [
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "7800195f24436637ba72ecfea058ca11629483a8af2f0c5ebb05d395eefaaeb6",
          "withoutMetadata": "164ca513fdea75904a575b0ec1aabf19d892c06755c7332cdcf40fa774bc6ea0",
          "linkedWithoutMetadata": "164ca513fdea75904a575b0ec1aabf19d892c06755c7332cdcf40fa774bc6ea0"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1185_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8413",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7586",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1185_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1185_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8413": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7586": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a8fa4db5ea62448980e5a64630a276fd65a7f1977af3256f2532d284d88412ef",
          "withoutMetadata": "71bfae8064cc5c55a4dd8225311f19dfc02275918b6d944013734b5295d82a1b",
          "linkedWithoutMetadata": "71bfae8064cc5c55a4dd8225311f19dfc02275918b6d944013734b5295d82a1b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:11",
        "version": {
          "withMetadata": "a295029400bea5e881a93612ad3bed05edf31fb5265442ce13ecf434df0ca0ed",
          "withoutMetadata": "e1ec1edab1733ed42a83d80ba2097cf0772b43126a871a5933986942b1f9113c",
          "linkedWithoutMetadata": "e1ec1edab1733ed42a83d80ba2097cf0772b43126a871a5933986942b1f9113c"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7586",
              "src": "contracts/FarmV2.sol:13"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3135_storage",
              "src": "contracts/FarmV2.sol:35"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3110_storage)",
              "src": "contracts/FarmV2.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7586": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3135_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1075"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1075"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3110_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3110_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4086_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8413",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4086_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4086_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8413": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5909",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5909": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5858",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5858": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6618",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6618": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8390",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8390": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize()",
          "withdrawRewards(uint256)",
          "FarmFactory()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11762",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11762": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11762",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11762": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11762",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11762": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10582_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10582_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10582_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "7800195f24436637ba72ecfea058ca11629483a8af2f0c5ebb05d395eefaaeb6",
          "withoutMetadata": "164ca513fdea75904a575b0ec1aabf19d892c06755c7332cdcf40fa774bc6ea0",
          "linkedWithoutMetadata": "164ca513fdea75904a575b0ec1aabf19d892c06755c7332cdcf40fa774bc6ea0"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1185_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8417",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7590",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1185_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1185_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8417": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7590": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "c3240d1d0b7d4c4df192a2b5cf2040dc98305360e6d2230b95f4ff4a0b9b3750",
          "withoutMetadata": "aa097e8976d93d62a25a0f41b1331eae86abae99ef573bb795dcb3e06d99b06e",
          "linkedWithoutMetadata": "aa097e8976d93d62a25a0f41b1331eae86abae99ef573bb795dcb3e06d99b06e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:11",
        "version": {
          "withMetadata": "e8aec405cc00a97364fb094378e1bbfe30bc9e3a80cd2ec5f16c67daf144aa72",
          "withoutMetadata": "080709813ebeb5943d70e1e5d2171503d7f222fab6f72e1dd292a92daa7d05ee",
          "linkedWithoutMetadata": "080709813ebeb5943d70e1e5d2171503d7f222fab6f72e1dd292a92daa7d05ee"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7590",
              "src": "contracts/FarmV2.sol:13"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3135_storage",
              "src": "contracts/FarmV2.sol:35"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3110_storage)",
              "src": "contracts/FarmV2.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7590": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3135_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1075"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1075"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3110_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3110_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4090_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8417",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4090_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4090_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8417": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5913",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5913": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5862",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5862": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6622",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6622": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8394",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8394": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize()",
          "withdrawRewards(uint256)",
          "FarmFactory()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11766",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11766": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11766",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11766": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11766",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11766": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10586_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10586_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10586_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "1de7d2ebc06804cacf18d71945a66caa64dde93197c072aa666f4c627e7cc7d3",
          "withoutMetadata": "594deab724af4227111c5ef7caece96506daa0d1096d7f719ad1f6056d053f43",
          "linkedWithoutMetadata": "594deab724af4227111c5ef7caece96506daa0d1096d7f719ad1f6056d053f43"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1185_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8429",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7602",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1185_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1185_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8429": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7602": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "b06b2dabf4176b74ca1472a2e2718218cdcf7a490c72cebae3ec948cbc821039",
          "withoutMetadata": "c17e834002ab6b4a26c75480d1120226c888258d6646c6ef0fefde532ca32bc6",
          "linkedWithoutMetadata": "c17e834002ab6b4a26c75480d1120226c888258d6646c6ef0fefde532ca32bc6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:11",
        "version": {
          "withMetadata": "e8aec405cc00a97364fb094378e1bbfe30bc9e3a80cd2ec5f16c67daf144aa72",
          "withoutMetadata": "080709813ebeb5943d70e1e5d2171503d7f222fab6f72e1dd292a92daa7d05ee",
          "linkedWithoutMetadata": "080709813ebeb5943d70e1e5d2171503d7f222fab6f72e1dd292a92daa7d05ee"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7602",
              "src": "contracts/FarmV2.sol:13"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3147_storage",
              "src": "contracts/FarmV2.sol:35"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3122_storage)",
              "src": "contracts/FarmV2.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7602": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3147_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1075"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1075"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3122_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3122_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4102_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8429",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4102_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4102_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8429": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5925",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5925": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5874",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5874": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6634",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6634": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8406",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8406": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize()",
          "withdrawRewards(uint256)",
          "FarmFactory()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11778",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11778": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11778",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11778": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11778",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11778": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10598_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10598_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10598_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "1de7d2ebc06804cacf18d71945a66caa64dde93197c072aa666f4c627e7cc7d3",
          "withoutMetadata": "594deab724af4227111c5ef7caece96506daa0d1096d7f719ad1f6056d053f43",
          "linkedWithoutMetadata": "594deab724af4227111c5ef7caece96506daa0d1096d7f719ad1f6056d053f43"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1185_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8421",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7594",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1185_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1185_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8421": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7594": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "780e6ca273b553fc4c50b64a4b752a8a34794752dd72071d4c78b502487c4aa8",
          "withoutMetadata": "6170b54112978080b02e6bc3472e1dafdbad4d7928c75de6c8f51542adae601f",
          "linkedWithoutMetadata": "6170b54112978080b02e6bc3472e1dafdbad4d7928c75de6c8f51542adae601f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:11",
        "version": {
          "withMetadata": "e8aec405cc00a97364fb094378e1bbfe30bc9e3a80cd2ec5f16c67daf144aa72",
          "withoutMetadata": "080709813ebeb5943d70e1e5d2171503d7f222fab6f72e1dd292a92daa7d05ee",
          "linkedWithoutMetadata": "080709813ebeb5943d70e1e5d2171503d7f222fab6f72e1dd292a92daa7d05ee"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7594",
              "src": "contracts/FarmV2.sol:13"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3139_storage",
              "src": "contracts/FarmV2.sol:35"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3114_storage)",
              "src": "contracts/FarmV2.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7594": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3139_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1075"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1075"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3114_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3114_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4094_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8421",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4094_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4094_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8421": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5917",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5917": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5866",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5866": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6626",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6626": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8398",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8398": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize()",
          "withdrawRewards(uint256)",
          "FarmFactory()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11770",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11770": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11770",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11770": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11770",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11770": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10590_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10590_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10590_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "1de7d2ebc06804cacf18d71945a66caa64dde93197c072aa666f4c627e7cc7d3",
          "withoutMetadata": "594deab724af4227111c5ef7caece96506daa0d1096d7f719ad1f6056d053f43",
          "linkedWithoutMetadata": "594deab724af4227111c5ef7caece96506daa0d1096d7f719ad1f6056d053f43"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1185_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8415",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7588",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1185_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1185_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8415": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7588": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "5bcde2d2c1557ecdddffd54a2b8d7a171c4a2b3856e9600b5c85f8e5eb099445",
          "withoutMetadata": "c3e0bc72bcc52e48c93d262e54392a93b054e0389bae7261438ae048b31568e7",
          "linkedWithoutMetadata": "c3e0bc72bcc52e48c93d262e54392a93b054e0389bae7261438ae048b31568e7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:11",
        "version": {
          "withMetadata": "e8aec405cc00a97364fb094378e1bbfe30bc9e3a80cd2ec5f16c67daf144aa72",
          "withoutMetadata": "080709813ebeb5943d70e1e5d2171503d7f222fab6f72e1dd292a92daa7d05ee",
          "linkedWithoutMetadata": "080709813ebeb5943d70e1e5d2171503d7f222fab6f72e1dd292a92daa7d05ee"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7588",
              "src": "contracts/FarmV2.sol:13"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3133_storage",
              "src": "contracts/FarmV2.sol:35"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3108_storage)",
              "src": "contracts/FarmV2.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7588": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3133_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1075"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1075"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3108_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3108_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4088_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8415",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4088_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4088_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8415": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5911",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5911": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5860",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5860": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6620",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6620": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1075",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8392",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1075": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8392": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize()",
          "withdrawRewards(uint256)",
          "FarmFactory()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11764",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11764": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11764",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11764": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11764",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11764": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10584_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10584_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10584_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "91ffd8da792c96ad7eadab04f6d463ef79d0b12c730bf2eb7d42adace0b0aab8",
          "withoutMetadata": "c1b49f93107b8f9b5f4c779668a95aab9b8424733254a1b1afea95c7886305c4",
          "linkedWithoutMetadata": "c1b49f93107b8f9b5f4c779668a95aab9b8424733254a1b1afea95c7886305c4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8355",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7531",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8355": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7531": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a47e7c431b1338ca35f445f663551272748793f6328faa09ab8a2a725ab68773",
          "withoutMetadata": "dfdfb046fb6e08fc2896d8a0b981b60cd15584b8f9944bbebb78f47a918d3334",
          "linkedWithoutMetadata": "dfdfb046fb6e08fc2896d8a0b981b60cd15584b8f9944bbebb78f47a918d3334"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "a9d479d35d8fa30dbf3c405dad4bd31fc6325b903bbb5b927e290a07b2503680",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7531",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3078_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3053_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7531": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3078_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3053_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3053_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4031_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8355",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4031_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4031_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8355": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5854",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5854": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5803",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5803": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6563",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6563": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8332",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8332": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "FarmFactory()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11704",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11704": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11704",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11704": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11704",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11704": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10524_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10524_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10524_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "91ffd8da792c96ad7eadab04f6d463ef79d0b12c730bf2eb7d42adace0b0aab8",
          "withoutMetadata": "c1b49f93107b8f9b5f4c779668a95aab9b8424733254a1b1afea95c7886305c4",
          "linkedWithoutMetadata": "c1b49f93107b8f9b5f4c779668a95aab9b8424733254a1b1afea95c7886305c4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8349",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7525",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8349": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7525": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "2aeff576563854bba5d489a5c7c247b27df07df1b097257c6e1eb402c217772c",
          "withoutMetadata": "eec3261843d2c2bde7064d9978119815cf6f943683b5d7e3fe31c19b6cad4337",
          "linkedWithoutMetadata": "eec3261843d2c2bde7064d9978119815cf6f943683b5d7e3fe31c19b6cad4337"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "a9d479d35d8fa30dbf3c405dad4bd31fc6325b903bbb5b927e290a07b2503680",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7525",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3072_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3047_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7525": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3072_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3047_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3047_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4025_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8349",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4025_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4025_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8349": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5848",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5848": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5797",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5797": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6557",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6557": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8326",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8326": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "FarmFactory()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11698",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11698": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11698",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11698": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11698",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11698": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10518_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10518_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10518_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "0bc6178124c36394265d1ad25f30118b91580a16e9ab88cbe91e8be35ad6eb46",
          "withoutMetadata": "d4e9927ceff5b5577ae7d355241b69a664edf3b9b31257b631324f2f7ab57a35",
          "linkedWithoutMetadata": "d4e9927ceff5b5577ae7d355241b69a664edf3b9b31257b631324f2f7ab57a35"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8354",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7525",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8354": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7525": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "9a0c07ce41ecc395ebd6d1171cb08a04b07232ece28ba1a0ec00127e2ab984c0",
          "withoutMetadata": "2f59fe29e63ec001ea0b1a57f7d62f387e5ad76e649f2ba10cea702588571f54",
          "linkedWithoutMetadata": "2f59fe29e63ec001ea0b1a57f7d62f387e5ad76e649f2ba10cea702588571f54"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "a9d479d35d8fa30dbf3c405dad4bd31fc6325b903bbb5b927e290a07b2503680",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7525",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3072_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3047_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7525": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3072_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3047_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3047_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4025_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8354",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4025_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4025_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8354": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5848",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5848": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5797",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5797": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6557",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6557": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8331",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8331": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11703",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11703": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11703",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11703": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11703",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11703": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10523_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10523_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10523_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "0bc6178124c36394265d1ad25f30118b91580a16e9ab88cbe91e8be35ad6eb46",
          "withoutMetadata": "d4e9927ceff5b5577ae7d355241b69a664edf3b9b31257b631324f2f7ab57a35",
          "linkedWithoutMetadata": "d4e9927ceff5b5577ae7d355241b69a664edf3b9b31257b631324f2f7ab57a35"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8282",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7453",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8282": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7453": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "c15efd2f22d40f4099bf7c19f727030b3f8a907e8fa2bb312ea654ddba939950",
          "withoutMetadata": "ca1160c24ff9e330f2b708ef404709b676954c4423931b20e4f598ebec50c83a",
          "linkedWithoutMetadata": "ca1160c24ff9e330f2b708ef404709b676954c4423931b20e4f598ebec50c83a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "d23602fbf5d162917f20ecf1d5705d519231d0cf07878476fe1552067971a43c",
          "withoutMetadata": "1bc3d118e1013b743d19b15eafffbb868fd5a221a9e24ef76ac88ff5eeb474e8",
          "linkedWithoutMetadata": "1bc3d118e1013b743d19b15eafffbb868fd5a221a9e24ef76ac88ff5eeb474e8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7453",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3085_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3060_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7453": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3085_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3060_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3060_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3953_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8282",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3953_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3953_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8282": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5776",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5776": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5725",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5725": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6485",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6485": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8259",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8259": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11631",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11631": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11631",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11631": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11631",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11631": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10451_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10451_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10451_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "0bc6178124c36394265d1ad25f30118b91580a16e9ab88cbe91e8be35ad6eb46",
          "withoutMetadata": "d4e9927ceff5b5577ae7d355241b69a664edf3b9b31257b631324f2f7ab57a35",
          "linkedWithoutMetadata": "d4e9927ceff5b5577ae7d355241b69a664edf3b9b31257b631324f2f7ab57a35"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8367",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7538",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8367": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7538": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "629e39e6d77627e72183a3f02c9c60c3d12ad1d3591763005c009128b11c8287",
          "withoutMetadata": "31003143693ecfe1cbd00f73a6f459a7d3c3ac9fb46439801e0f28a040272d14",
          "linkedWithoutMetadata": "31003143693ecfe1cbd00f73a6f459a7d3c3ac9fb46439801e0f28a040272d14"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "a9d479d35d8fa30dbf3c405dad4bd31fc6325b903bbb5b927e290a07b2503680",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7538",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3085_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3060_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7538": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3085_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3060_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3060_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4038_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8367",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4038_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4038_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8367": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5861",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5861": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5810",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5810": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6570",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6570": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8344",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8344": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10536_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10536_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10536_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "ae1bb19051e692fea61b4921ec7222f920526cdd28c5839a2a7a10e96973a7c1",
          "withoutMetadata": "37ac2f323057013960b3b6a8c34fa8c12f8ee504f9cc91cff7b93509672048d1",
          "linkedWithoutMetadata": "37ac2f323057013960b3b6a8c34fa8c12f8ee504f9cc91cff7b93509672048d1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8353",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7524",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8353": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7524": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "4c3e02685239bb883c89eb8dd9e0cc447f7af5beedd8144bc3e72ebce76de8dd",
          "withoutMetadata": "a18cc936ce5bb4d0ae837b46b88f1b59186948bff56191a4a6caf84ccb0e55f4",
          "linkedWithoutMetadata": "a18cc936ce5bb4d0ae837b46b88f1b59186948bff56191a4a6caf84ccb0e55f4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "af0d16c8bca107189f1f74dbeda4c568112cc9f2dfbdd589011229d55c71e5e7",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7524",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3071_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3046_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7524": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3071_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3046_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3046_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4024_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8353",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4024_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4024_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8353": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5847",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5847": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5796",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5796": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6556",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6556": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8330",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8330": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11702",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11702": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11702",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11702": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11702",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11702": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10522_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10522_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10522_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "ae1bb19051e692fea61b4921ec7222f920526cdd28c5839a2a7a10e96973a7c1",
          "withoutMetadata": "37ac2f323057013960b3b6a8c34fa8c12f8ee504f9cc91cff7b93509672048d1",
          "linkedWithoutMetadata": "37ac2f323057013960b3b6a8c34fa8c12f8ee504f9cc91cff7b93509672048d1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8367",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7538",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8367": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7538": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "847552a7a7b0ea6279c43f2f8e625af99161dcbdf41dd312d3343d14748266cc",
          "withoutMetadata": "ec16c128d92c602e283f279fe3c8ebe96e1dcac35c13df032aab01c627874d5e",
          "linkedWithoutMetadata": "ec16c128d92c602e283f279fe3c8ebe96e1dcac35c13df032aab01c627874d5e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "af0d16c8bca107189f1f74dbeda4c568112cc9f2dfbdd589011229d55c71e5e7",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7538",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3085_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3060_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7538": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3085_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3060_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3060_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "1f898e97fe642c6d24416c5abff90fd4bed02a647f2411ab0582f269e7809562",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4038_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8367",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4038_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4038_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8367": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5861",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5861": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5810",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5810": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6570",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6570": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8344",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8344": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10536_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10536_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10536_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4802",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4802": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "1bf8b8f28881d0a44e81b6a3e315958cfae1953c6879c524dd9bbcd9cd4b4ccf",
          "withoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976",
          "linkedWithoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4803",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4803": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "b5b11686e61e7f521b374902d5caff14f5acd80fa6dd6af98ffa785e7d925707",
          "withoutMetadata": "ace87d7a51aa6b2ec5328d99a408e35542f318ecf3a88d77597bf5a063627549",
          "linkedWithoutMetadata": "ace87d7a51aa6b2ec5328d99a408e35542f318ecf3a88d77597bf5a063627549"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4802",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4802": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "1bf8b8f28881d0a44e81b6a3e315958cfae1953c6879c524dd9bbcd9cd4b4ccf",
          "withoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976",
          "linkedWithoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4802",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4802": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "9997c60b14630db7096992f788f29a46936c1a7669649c5850f384693a681a7e",
          "withoutMetadata": "d038325157734c4312c7302f383a84a4845a962e3ca0303b6b0036c08f77f7ce",
          "linkedWithoutMetadata": "d038325157734c4312c7302f383a84a4845a962e3ca0303b6b0036c08f77f7ce"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "461f70c865edc88ff7fbe1e1e62042f39ede253573ef427826f98f29f49996f5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "acab5506ffb8e65d0c7aa22c947245b6585e0f2854091ea66fdc1b7b8767277d",
          "withoutMetadata": "661c5255f8b82f9310cda70f1ce2ab6c63db6e64e805b0bf25f64a6ae83be964",
          "linkedWithoutMetadata": "661c5255f8b82f9310cda70f1ce2ab6c63db6e64e805b0bf25f64a6ae83be964"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "0dad287557691119daaf6a4d08253ef6f6dbd0221e415aa606cf66162bb98ee8",
          "withoutMetadata": "c904e68ab3d61f849da1f3164d3506e3d468e70358b359baac1ebb9b498752b7",
          "linkedWithoutMetadata": "c904e68ab3d61f849da1f3164d3506e3d468e70358b359baac1ebb9b498752b7"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "899e72b693a14d0b4af4b04f7d050ff667b49d7d9359c6f871ebb676064e4bdb",
          "withoutMetadata": "47012f2eadc733812a66b427869adc85367e7502cbc0475816b3fe77dd0c48e7",
          "linkedWithoutMetadata": "47012f2eadc733812a66b427869adc85367e7502cbc0475816b3fe77dd0c48e7"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "cc1ba94ba04ea33f8a368d00c27b5da5ea02ad48db196eeea478c751c7bf64a9",
          "withoutMetadata": "7dc2b96d5b8bf75ae61a145f03be580e841d5c66c5b0eab6b2b63d63c4599248",
          "linkedWithoutMetadata": "7dc2b96d5b8bf75ae61a145f03be580e841d5c66c5b0eab6b2b63d63c4599248"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4771",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4771": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "9997c60b14630db7096992f788f29a46936c1a7669649c5850f384693a681a7e",
          "withoutMetadata": "d038325157734c4312c7302f383a84a4845a962e3ca0303b6b0036c08f77f7ce",
          "linkedWithoutMetadata": "d038325157734c4312c7302f383a84a4845a962e3ca0303b6b0036c08f77f7ce"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "461f70c865edc88ff7fbe1e1e62042f39ede253573ef427826f98f29f49996f5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "acab5506ffb8e65d0c7aa22c947245b6585e0f2854091ea66fdc1b7b8767277d",
          "withoutMetadata": "661c5255f8b82f9310cda70f1ce2ab6c63db6e64e805b0bf25f64a6ae83be964",
          "linkedWithoutMetadata": "661c5255f8b82f9310cda70f1ce2ab6c63db6e64e805b0bf25f64a6ae83be964"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "0dad287557691119daaf6a4d08253ef6f6dbd0221e415aa606cf66162bb98ee8",
          "withoutMetadata": "c904e68ab3d61f849da1f3164d3506e3d468e70358b359baac1ebb9b498752b7",
          "linkedWithoutMetadata": "c904e68ab3d61f849da1f3164d3506e3d468e70358b359baac1ebb9b498752b7"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "899e72b693a14d0b4af4b04f7d050ff667b49d7d9359c6f871ebb676064e4bdb",
          "withoutMetadata": "47012f2eadc733812a66b427869adc85367e7502cbc0475816b3fe77dd0c48e7",
          "linkedWithoutMetadata": "47012f2eadc733812a66b427869adc85367e7502cbc0475816b3fe77dd0c48e7"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "cc1ba94ba04ea33f8a368d00c27b5da5ea02ad48db196eeea478c751c7bf64a9",
          "withoutMetadata": "7dc2b96d5b8bf75ae61a145f03be580e841d5c66c5b0eab6b2b63d63c4599248",
          "linkedWithoutMetadata": "7dc2b96d5b8bf75ae61a145f03be580e841d5c66c5b0eab6b2b63d63c4599248"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4771",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4771": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "23714e5a209dc61f64a627356765f586d7ad4bb38d5c3138eb584b6d6f582da9",
          "withoutMetadata": "7e2baf171813f783f5853e3f01b5e07b88af0c5489f4b55484b8fb9474db9132",
          "linkedWithoutMetadata": "7e2baf171813f783f5853e3f01b5e07b88af0c5489f4b55484b8fb9474db9132"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a5a5f0803d2d2466e187627f3ebee00e553a16b3e32f473794e2a15d49dbca69",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "8ddbd114ae1a283b5f0c345be053eedfa1e6b575e55ef1b3ccee1c7b69ce124b",
          "withoutMetadata": "6d9bb86b67b42f7c9c769e7085ea217e15315dbb263b8e2c415c0550d9c01c05",
          "linkedWithoutMetadata": "6d9bb86b67b42f7c9c769e7085ea217e15315dbb263b8e2c415c0550d9c01c05"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "3d0272298a37cb9c73bebf75dd2b703350715aa1cbcbcb086c010ae28ae9ad68",
          "withoutMetadata": "ddf9d1a0305cef8947f361f75e72ba37b86752ac8d743e0af9bb7855a2909f2a",
          "linkedWithoutMetadata": "ddf9d1a0305cef8947f361f75e72ba37b86752ac8d743e0af9bb7855a2909f2a"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "ed8812c25243b31a9c3ea749590b77ed387b7af4d2ac95e2505a53c096981d48",
          "withoutMetadata": "190c121ff45f264ddead7327f6f1f8a64df19f28b8f029d04adbe435011540cd",
          "linkedWithoutMetadata": "190c121ff45f264ddead7327f6f1f8a64df19f28b8f029d04adbe435011540cd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "f1efe629483a5c56c6b9164f4b0cd0d50d55afe1d1daa0171018dfd92457a460",
          "withoutMetadata": "f5de7d7af9a4cf13c83f7ff9c7a89fff327a94555b119c1e56394a520533b223",
          "linkedWithoutMetadata": "f5de7d7af9a4cf13c83f7ff9c7a89fff327a94555b119c1e56394a520533b223"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4796",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4796": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "23714e5a209dc61f64a627356765f586d7ad4bb38d5c3138eb584b6d6f582da9",
          "withoutMetadata": "7e2baf171813f783f5853e3f01b5e07b88af0c5489f4b55484b8fb9474db9132",
          "linkedWithoutMetadata": "7e2baf171813f783f5853e3f01b5e07b88af0c5489f4b55484b8fb9474db9132"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "a5a5f0803d2d2466e187627f3ebee00e553a16b3e32f473794e2a15d49dbca69",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "8ddbd114ae1a283b5f0c345be053eedfa1e6b575e55ef1b3ccee1c7b69ce124b",
          "withoutMetadata": "6d9bb86b67b42f7c9c769e7085ea217e15315dbb263b8e2c415c0550d9c01c05",
          "linkedWithoutMetadata": "6d9bb86b67b42f7c9c769e7085ea217e15315dbb263b8e2c415c0550d9c01c05"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "3d0272298a37cb9c73bebf75dd2b703350715aa1cbcbcb086c010ae28ae9ad68",
          "withoutMetadata": "ddf9d1a0305cef8947f361f75e72ba37b86752ac8d743e0af9bb7855a2909f2a",
          "linkedWithoutMetadata": "ddf9d1a0305cef8947f361f75e72ba37b86752ac8d743e0af9bb7855a2909f2a"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "ed8812c25243b31a9c3ea749590b77ed387b7af4d2ac95e2505a53c096981d48",
          "withoutMetadata": "190c121ff45f264ddead7327f6f1f8a64df19f28b8f029d04adbe435011540cd",
          "linkedWithoutMetadata": "190c121ff45f264ddead7327f6f1f8a64df19f28b8f029d04adbe435011540cd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "f1efe629483a5c56c6b9164f4b0cd0d50d55afe1d1daa0171018dfd92457a460",
          "withoutMetadata": "f5de7d7af9a4cf13c83f7ff9c7a89fff327a94555b119c1e56394a520533b223",
          "linkedWithoutMetadata": "f5de7d7af9a4cf13c83f7ff9c7a89fff327a94555b119c1e56394a520533b223"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4796",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4796": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "542a2f51724d99465598514e371807c8c5c7957cde4e268fb42babd1df0d217f",
          "withoutMetadata": "d70f5c2e66226df00702044725916a6b2d9c1203254b7460ff3837c2d5b804b6",
          "linkedWithoutMetadata": "d70f5c2e66226df00702044725916a6b2d9c1203254b7460ff3837c2d5b804b6"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "170325512af98a49b4084701c3520efddfffa4d59914fa4f52325354b241b19c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "b540746f620675c7a1502e2edf8011e528506ba14cdce5c99caad7e0d4208660",
          "withoutMetadata": "2e39b2a429db77a91252242881f9a3f11fb337e64c2c3c15f539f671b12258f9",
          "linkedWithoutMetadata": "2e39b2a429db77a91252242881f9a3f11fb337e64c2c3c15f539f671b12258f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "953084d99ef3b074672d0917fce878211017a1e5bdcb8355e4ebb34aacca175c",
          "withoutMetadata": "3f87515d19a267fa5190216f9ae13c85e0827e69a22bf775294c13b4b7aac020",
          "linkedWithoutMetadata": "3f87515d19a267fa5190216f9ae13c85e0827e69a22bf775294c13b4b7aac020"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "c0bbb8e1894dc5526fa6e3bea9c9f0cace7543596e076f032add84332801a1e3",
          "withoutMetadata": "f5e592acca8ae4a1c44162b39cbd8f5609e127d23128d289c1182dd8c0066428",
          "linkedWithoutMetadata": "f5e592acca8ae4a1c44162b39cbd8f5609e127d23128d289c1182dd8c0066428"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "c86d14b2c4158411c1fddbffcb67c927e0095faaafd0abbe837f704bf81c9d5a",
          "withoutMetadata": "fb295a3a2455e385b7c67fcba05654b28570db4a25d3633e7f5d3614b7162792",
          "linkedWithoutMetadata": "fb295a3a2455e385b7c67fcba05654b28570db4a25d3633e7f5d3614b7162792"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4765",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4765": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "542a2f51724d99465598514e371807c8c5c7957cde4e268fb42babd1df0d217f",
          "withoutMetadata": "d70f5c2e66226df00702044725916a6b2d9c1203254b7460ff3837c2d5b804b6",
          "linkedWithoutMetadata": "d70f5c2e66226df00702044725916a6b2d9c1203254b7460ff3837c2d5b804b6"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "170325512af98a49b4084701c3520efddfffa4d59914fa4f52325354b241b19c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "b540746f620675c7a1502e2edf8011e528506ba14cdce5c99caad7e0d4208660",
          "withoutMetadata": "2e39b2a429db77a91252242881f9a3f11fb337e64c2c3c15f539f671b12258f9",
          "linkedWithoutMetadata": "2e39b2a429db77a91252242881f9a3f11fb337e64c2c3c15f539f671b12258f9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "953084d99ef3b074672d0917fce878211017a1e5bdcb8355e4ebb34aacca175c",
          "withoutMetadata": "3f87515d19a267fa5190216f9ae13c85e0827e69a22bf775294c13b4b7aac020",
          "linkedWithoutMetadata": "3f87515d19a267fa5190216f9ae13c85e0827e69a22bf775294c13b4b7aac020"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "c0bbb8e1894dc5526fa6e3bea9c9f0cace7543596e076f032add84332801a1e3",
          "withoutMetadata": "f5e592acca8ae4a1c44162b39cbd8f5609e127d23128d289c1182dd8c0066428",
          "linkedWithoutMetadata": "f5e592acca8ae4a1c44162b39cbd8f5609e127d23128d289c1182dd8c0066428"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "c86d14b2c4158411c1fddbffcb67c927e0095faaafd0abbe837f704bf81c9d5a",
          "withoutMetadata": "fb295a3a2455e385b7c67fcba05654b28570db4a25d3633e7f5d3614b7162792",
          "linkedWithoutMetadata": "fb295a3a2455e385b7c67fcba05654b28570db4a25d3633e7f5d3614b7162792"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4765",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4765": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "1bf8b8f28881d0a44e81b6a3e315958cfae1953c6879c524dd9bbcd9cd4b4ccf",
          "withoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976",
          "linkedWithoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4802",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4802": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "1bf8b8f28881d0a44e81b6a3e315958cfae1953c6879c524dd9bbcd9cd4b4ccf",
          "withoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976",
          "linkedWithoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "8cbb9648407527a4e357c479e747c386cc3e1495a2a30aae36b56a003129ea16",
          "withoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976",
          "linkedWithoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "3fa845ddb6a7611a3b0bec0f3a7bb3140826f7d704a77bdd403202de4dbf88e4",
          "withoutMetadata": "0e332b8e56feeea1d5c54d138a7224736ee6aecde5cbe4b0b10153052e12eb7f",
          "linkedWithoutMetadata": "0e332b8e56feeea1d5c54d138a7224736ee6aecde5cbe4b0b10153052e12eb7f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "e37eadb111f086cefc447b4641b4f9eba1ce3657e376ec5f340d754bcf7a1f72",
          "withoutMetadata": "9a16ab45f858d0ddf440018bbad15c3004388ca619a3066bb19693b74e29be31",
          "linkedWithoutMetadata": "9a16ab45f858d0ddf440018bbad15c3004388ca619a3066bb19693b74e29be31"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:16"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:19"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "bbefa8707831c979b6a2ca38d11e7b3e355ca08dabdaa26cfed6342176b168ed",
          "withoutMetadata": "b3f86911531c9999b2cb54df55235bfa9044f47218c78c69089d7797bb780496",
          "linkedWithoutMetadata": "b3f86911531c9999b2cb54df55235bfa9044f47218c78c69089d7797bb780496"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "dd8638a79707a56cafc6f53622c0f26b3b60af90769175683b0ecf668703e729",
          "withoutMetadata": "f5fbdd49405590d891a03209ecb54cb1efebda9a40f3e7cc18efb81db09f9af9",
          "linkedWithoutMetadata": "f5fbdd49405590d891a03209ecb54cb1efebda9a40f3e7cc18efb81db09f9af9"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "4af9fda99698caf14a6b7b6ce4e6444b3c0e9f860389e107bb7f020fdb80de20",
          "withoutMetadata": "705f920e818476cf213b9435873947bc65c7b4ae3a636e5d64b17d57acedf54b",
          "linkedWithoutMetadata": "705f920e818476cf213b9435873947bc65c7b4ae3a636e5d64b17d57acedf54b"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "d0de38319385578439fcfce4e5db74ed446cf906dbd12fe610ae20b0b4e888ef",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "3fa845ddb6a7611a3b0bec0f3a7bb3140826f7d704a77bdd403202de4dbf88e4",
          "withoutMetadata": "0e332b8e56feeea1d5c54d138a7224736ee6aecde5cbe4b0b10153052e12eb7f",
          "linkedWithoutMetadata": "0e332b8e56feeea1d5c54d138a7224736ee6aecde5cbe4b0b10153052e12eb7f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "e37eadb111f086cefc447b4641b4f9eba1ce3657e376ec5f340d754bcf7a1f72",
          "withoutMetadata": "9a16ab45f858d0ddf440018bbad15c3004388ca619a3066bb19693b74e29be31",
          "linkedWithoutMetadata": "9a16ab45f858d0ddf440018bbad15c3004388ca619a3066bb19693b74e29be31"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:16"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:19"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "bbefa8707831c979b6a2ca38d11e7b3e355ca08dabdaa26cfed6342176b168ed",
          "withoutMetadata": "b3f86911531c9999b2cb54df55235bfa9044f47218c78c69089d7797bb780496",
          "linkedWithoutMetadata": "b3f86911531c9999b2cb54df55235bfa9044f47218c78c69089d7797bb780496"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "dd8638a79707a56cafc6f53622c0f26b3b60af90769175683b0ecf668703e729",
          "withoutMetadata": "f5fbdd49405590d891a03209ecb54cb1efebda9a40f3e7cc18efb81db09f9af9",
          "linkedWithoutMetadata": "f5fbdd49405590d891a03209ecb54cb1efebda9a40f3e7cc18efb81db09f9af9"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "8cbb9648407527a4e357c479e747c386cc3e1495a2a30aae36b56a003129ea16",
          "withoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976",
          "linkedWithoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "8cbb9648407527a4e357c479e747c386cc3e1495a2a30aae36b56a003129ea16",
          "withoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976",
          "linkedWithoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4791",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4791": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "2268f18781dd74c481aad7fb74335bb3c7335346bb57465e4b3fa86b91fa55f2",
          "withoutMetadata": "86ef4763651a9ed37f7a42c65282dbe7756eccd74a3803363616fac599211239",
          "linkedWithoutMetadata": "86ef4763651a9ed37f7a42c65282dbe7756eccd74a3803363616fac599211239"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "8cbb9648407527a4e357c479e747c386cc3e1495a2a30aae36b56a003129ea16",
          "withoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976",
          "linkedWithoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4753",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4753": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "bdc3193c43a36057b1b7786731a758de642caf67da15b9e7f34fd7ad61617ee1",
          "withoutMetadata": "8db1e973e2ae98788f7a4ba7b613fa723d1fdd5d431c464e30c727d9c681bb22",
          "linkedWithoutMetadata": "8db1e973e2ae98788f7a4ba7b613fa723d1fdd5d431c464e30c727d9c681bb22"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "8cbb9648407527a4e357c479e747c386cc3e1495a2a30aae36b56a003129ea16",
          "withoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976",
          "linkedWithoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "ae8a82456f7407a80096669349227daf30949404bc4265186100bdc057d5e395",
          "withoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976",
          "linkedWithoutMetadata": "c0fee1773ea2b3f176d7edaa36ac08bf4125de104daaa14ee8e7e8a0ee5d0976"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "f9fd88c2c51efcfbf7e2d2e111a1bb1affc69bfaa57da2b2c8aef8b1632cf088",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2ERC20": {
        "src": "contracts/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "ae1bb19051e692fea61b4921ec7222f920526cdd28c5839a2a7a10e96973a7c1",
          "withoutMetadata": "37ac2f323057013960b3b6a8c34fa8c12f8ee504f9cc91cff7b93509672048d1",
          "linkedWithoutMetadata": "37ac2f323057013960b3b6a8c34fa8c12f8ee504f9cc91cff7b93509672048d1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8367",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7538",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8367": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7538": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "847552a7a7b0ea6279c43f2f8e625af99161dcbdf41dd312d3343d14748266cc",
          "withoutMetadata": "ec16c128d92c602e283f279fe3c8ebe96e1dcac35c13df032aab01c627874d5e",
          "linkedWithoutMetadata": "ec16c128d92c602e283f279fe3c8ebe96e1dcac35c13df032aab01c627874d5e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "af0d16c8bca107189f1f74dbeda4c568112cc9f2dfbdd589011229d55c71e5e7",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7538",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3085_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3060_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7538": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3085_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3060_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3060_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4038_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8367",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4038_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4038_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8367": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5861",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5861": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5810",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5810": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6570",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6570": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8344",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8344": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "66980eb74b1818fdbc2e4d8288054764dd5e33b5d81ddfe040fb98867af0defd",
          "withoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74",
          "linkedWithoutMetadata": "bdbf8b9c1cf2658849f152ad1501fe9ba5de817b2d03e806d7023499eaeedc74"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10536_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10536_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10536_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "a8c8581e599541fbc827e3d3f4040bd7ffbc35c1e7545ea9307dfebbd1b31932",
          "withoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c",
          "linkedWithoutMetadata": "52d3e2403647be0e1094170b3441d192a08f27158b7d5329c5f4cab3f078434c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "becc51052a179f3f5a9e00274c7a81709efe676b0667e19094fcd655fe356db8",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "f4a2c93390fedf71d2dd3b68cb25f0fd25043b480dd3dbc0759b29a9754f4154",
          "withoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e",
          "linkedWithoutMetadata": "5627d8864f090fad2d201d9ee8ca07b697c6dd2b094ee5764b969a0c5c0fea2e"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "destroy(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "cb53db9a702f58a8cc051638b5f96827606ff2d31111e150d7b62ec03e96b34d",
          "withoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd",
          "linkedWithoutMetadata": "4eb3243d96967fac217e9a29202091b24a904b5950f259dacfb2cbc38d418fdd"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "4a15fa71b7ffad80026ae5651db176877f454f08c1609ce20c7ab662086a4d14",
          "withoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba",
          "linkedWithoutMetadata": "4c2502919b671381064b4cbfe3dab9c29ebf9f499e60c7890fcf6e3b6aea88ba"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "8f402a25bdc413759f2e5eb12c5b188fbd55c05180675fd2d7f0025dd008c768",
          "withoutMetadata": "a92f09a84ae5018a9c67e99466c8cbbcb99fb24c7fcb57213bcc103df10be6f9",
          "linkedWithoutMetadata": "a92f09a84ae5018a9c67e99466c8cbbcb99fb24c7fcb57213bcc103df10be6f9"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "destroy(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "90e08a7d27045db14dca346ba9d406ae2344419007cc790b620396105d76ea5f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompounderFactory": {
        "src": "contracts/CompounderFactory.sol:36",
        "version": {
          "withMetadata": "ae1bb19051e692fea61b4921ec7222f920526cdd28c5839a2a7a10e96973a7c1",
          "withoutMetadata": "37ac2f323057013960b3b6a8c34fa8c12f8ee504f9cc91cff7b93509672048d1",
          "linkedWithoutMetadata": "37ac2f323057013960b3b6a8c34fa8c12f8ee504f9cc91cff7b93509672048d1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompounderFactory",
            "src": "contracts/CompounderFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompounderFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompounderFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompounderFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompounderFactory.sol:48"
            },
            {
              "contract": "CompounderFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8367",
              "src": "contracts/CompounderFactory.sol:49"
            },
            {
              "contract": "CompounderFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7538",
              "src": "contracts/CompounderFactory.sol:50"
            },
            {
              "contract": "CompounderFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:51"
            },
            {
              "contract": "CompounderFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompounderFactory.sol:52"
            },
            {
              "contract": "CompounderFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompounderFactory.sol:53"
            },
            {
              "contract": "CompounderFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:54"
            },
            {
              "contract": "CompounderFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:55"
            },
            {
              "contract": "CompounderFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:57"
            },
            {
              "contract": "CompounderFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:58"
            },
            {
              "contract": "CompounderFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:59"
            },
            {
              "contract": "CompounderFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:60"
            },
            {
              "contract": "CompounderFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompounderFactory.sol:61"
            },
            {
              "contract": "CompounderFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompounderFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct CompounderFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct CompounderFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8367": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7538": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "847552a7a7b0ea6279c43f2f8e625af99161dcbdf41dd312d3343d14748266cc",
          "withoutMetadata": "ec16c128d92c602e283f279fe3c8ebe96e1dcac35c13df032aab01c627874d5e",
          "linkedWithoutMetadata": "ec16c128d92c602e283f279fe3c8ebe96e1dcac35c13df032aab01c627874d5e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "af0d16c8bca107189f1f74dbeda4c568112cc9f2dfbdd589011229d55c71e5e7",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7538",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3085_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3060_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7538": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3085_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3060_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3060_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4038_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8367",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4038_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4038_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8367": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5861",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5861": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5810",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5810": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6570",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6570": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8344",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8344": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10536_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10536_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10536_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CompoundFactory": {
        "src": "contracts/CompoundFactory.sol:36",
        "version": {
          "withMetadata": "6e51f21a8e4513966e3d59ce5966b64bb3a072e1efe16d2cb5aeb5c115cac762",
          "withoutMetadata": "7935e324b2e422b292211bd79a345a3538645d804028e3ebb0471ccc3119e2ee",
          "linkedWithoutMetadata": "7935e324b2e422b292211bd79a345a3538645d804028e3ebb0471ccc3119e2ee"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompoundFactory",
            "src": "contracts/CompoundFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CompoundFactory",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:48"
            },
            {
              "contract": "CompoundFactory",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8367",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "CompoundFactory",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7538",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "CompoundFactory",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "CompoundFactory",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "CompoundFactory",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "CompoundFactory",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "CompoundFactory",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "CompoundFactory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "CompoundFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "CompoundFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "CompoundFactory",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "CompoundFactory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "CompoundFactory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct CompoundFactory.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct CompoundFactory.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8367": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7538": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "847552a7a7b0ea6279c43f2f8e625af99161dcbdf41dd312d3343d14748266cc",
          "withoutMetadata": "ec16c128d92c602e283f279fe3c8ebe96e1dcac35c13df032aab01c627874d5e",
          "linkedWithoutMetadata": "ec16c128d92c602e283f279fe3c8ebe96e1dcac35c13df032aab01c627874d5e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "af0d16c8bca107189f1f74dbeda4c568112cc9f2dfbdd589011229d55c71e5e7",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7538",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3085_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3060_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7538": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3085_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3060_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3060_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4038_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8367",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4038_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4038_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8367": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5861",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5861": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5810",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5810": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "85f8134e8d7d2e415a78464bc9475dfe3ac3eedfa554ef718517c18863c78ea4",
          "withoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e",
          "linkedWithoutMetadata": "d6ba6a8f58e20154527ea4a37cda879cbcb9c6be3391df2f52c2c04f641a273e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Incinerator",
            "src": "contracts/Incinerator.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6570",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6570": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8344",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8344": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:12",
        "version": {
          "withMetadata": "d4aabc2c3c693b5787d3e600ecf487136f2ef1c672ce806c58c95606a932ae12",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11716",
              "src": "contracts/uniswapv2/PathOracle.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11716": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10536_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10536_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10536_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "550068f69d87d2a051ee745ac88730394a0f7c6b750de4769722ac17884ff2e9",
          "withoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff",
          "linkedWithoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "84fda69b28ac236d4968e85f99b51e4c12dfd32e7d77afc8dd68eae4433610c5",
          "withoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c",
          "linkedWithoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "465058de608d2bd6dd5a86fc8387e047ef94298ea44a7d82c386e673e216916f",
          "withoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022",
          "linkedWithoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "026249dd93e3227953313e948596155591dca4f219eba4da9f3719a7bbb87b00",
          "withoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49",
          "linkedWithoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "8f402a25bdc413759f2e5eb12c5b188fbd55c05180675fd2d7f0025dd008c768",
          "withoutMetadata": "a92f09a84ae5018a9c67e99466c8cbbcb99fb24c7fcb57213bcc103df10be6f9",
          "linkedWithoutMetadata": "a92f09a84ae5018a9c67e99466c8cbbcb99fb24c7fcb57213bcc103df10be6f9"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "90e08a7d27045db14dca346ba9d406ae2344419007cc790b620396105d76ea5f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "98a14fafb31636368f7fced21648f80bdd3016dcb078b504004892d1821cfbfc",
          "withoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff",
          "linkedWithoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "84fda69b28ac236d4968e85f99b51e4c12dfd32e7d77afc8dd68eae4433610c5",
          "withoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c",
          "linkedWithoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "465058de608d2bd6dd5a86fc8387e047ef94298ea44a7d82c386e673e216916f",
          "withoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022",
          "linkedWithoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "026249dd93e3227953313e948596155591dca4f219eba4da9f3719a7bbb87b00",
          "withoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49",
          "linkedWithoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "8f402a25bdc413759f2e5eb12c5b188fbd55c05180675fd2d7f0025dd008c768",
          "withoutMetadata": "a92f09a84ae5018a9c67e99466c8cbbcb99fb24c7fcb57213bcc103df10be6f9",
          "linkedWithoutMetadata": "a92f09a84ae5018a9c67e99466c8cbbcb99fb24c7fcb57213bcc103df10be6f9"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "90e08a7d27045db14dca346ba9d406ae2344419007cc790b620396105d76ea5f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "98a14fafb31636368f7fced21648f80bdd3016dcb078b504004892d1821cfbfc",
          "withoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff",
          "linkedWithoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "84fda69b28ac236d4968e85f99b51e4c12dfd32e7d77afc8dd68eae4433610c5",
          "withoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c",
          "linkedWithoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "465058de608d2bd6dd5a86fc8387e047ef94298ea44a7d82c386e673e216916f",
          "withoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022",
          "linkedWithoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "026249dd93e3227953313e948596155591dca4f219eba4da9f3719a7bbb87b00",
          "withoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49",
          "linkedWithoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4802",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4802": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:14",
        "version": {
          "withMetadata": "fa8cafd060261f34110f2b63f0595216b2410ca84f24a95a9accbc38dc924b8e",
          "withoutMetadata": "a92f09a84ae5018a9c67e99466c8cbbcb99fb24c7fcb57213bcc103df10be6f9",
          "linkedWithoutMetadata": "a92f09a84ae5018a9c67e99466c8cbbcb99fb24c7fcb57213bcc103df10be6f9"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "90e08a7d27045db14dca346ba9d406ae2344419007cc790b620396105d76ea5f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "98a14fafb31636368f7fced21648f80bdd3016dcb078b504004892d1821cfbfc",
          "withoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff",
          "linkedWithoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "84fda69b28ac236d4968e85f99b51e4c12dfd32e7d77afc8dd68eae4433610c5",
          "withoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c",
          "linkedWithoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "465058de608d2bd6dd5a86fc8387e047ef94298ea44a7d82c386e673e216916f",
          "withoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022",
          "linkedWithoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "026249dd93e3227953313e948596155591dca4f219eba4da9f3719a7bbb87b00",
          "withoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49",
          "linkedWithoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "8f402a25bdc413759f2e5eb12c5b188fbd55c05180675fd2d7f0025dd008c768",
          "withoutMetadata": "a92f09a84ae5018a9c67e99466c8cbbcb99fb24c7fcb57213bcc103df10be6f9",
          "linkedWithoutMetadata": "a92f09a84ae5018a9c67e99466c8cbbcb99fb24c7fcb57213bcc103df10be6f9"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "90e08a7d27045db14dca346ba9d406ae2344419007cc790b620396105d76ea5f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:36",
        "version": {
          "withMetadata": "00e82d667bcc40ee973a5fd541dd273fe65b7ab03917eb5f9e35bf471635e8e6",
          "withoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516",
          "linkedWithoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:48"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8337",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7508",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8337": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7508": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "847552a7a7b0ea6279c43f2f8e625af99161dcbdf41dd312d3343d14748266cc",
          "withoutMetadata": "ec16c128d92c602e283f279fe3c8ebe96e1dcac35c13df032aab01c627874d5e",
          "linkedWithoutMetadata": "ec16c128d92c602e283f279fe3c8ebe96e1dcac35c13df032aab01c627874d5e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "af0d16c8bca107189f1f74dbeda4c568112cc9f2dfbdd589011229d55c71e5e7",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7508",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3085_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3060_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7508": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3085_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3060_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3060_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4038_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8337",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4038_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4038_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8337": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5861",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5861": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5810",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5810": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "268e8fdbe99df7ed3b54f3ff6aae867926e95c77ce88c750cfd09d90a13f6766",
          "withoutMetadata": "a10f7aa119798745ac3b379a85298d5766732c28412e4db0194b2dd076ab6284",
          "linkedWithoutMetadata": "a10f7aa119798745ac3b379a85298d5766732c28412e4db0194b2dd076ab6284"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6540",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6540": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8314",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8314": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11686",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11686": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11686",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11686": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11686",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11686": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10506_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10506_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10506_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:36",
        "version": {
          "withMetadata": "00e82d667bcc40ee973a5fd541dd273fe65b7ab03917eb5f9e35bf471635e8e6",
          "withoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516",
          "linkedWithoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:48"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8329",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7500",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8329": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7500": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "ceb5fea0b785a9fa3ee044d9758646a2341cfbc356e216480fa1a0754c6c3ec2",
          "withoutMetadata": "59ada783a0b718e5fd553634323223494ecf366d00cfb46613cb24b3b42c9bc3",
          "linkedWithoutMetadata": "59ada783a0b718e5fd553634323223494ecf366d00cfb46613cb24b3b42c9bc3"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "setIncinerator(address)",
          "setFeeManager(address)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "0c709d68c40da6c9401a537f352e0f7bcd6c39ab5e7071cdc307b11864d961d3",
          "withoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d",
          "linkedWithoutMetadata": "8c92fbb7afaadbb975d00a2cac9db33789a6dc358cedbf0fa5c063d7705e4c1d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7500",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3085_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3060_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7500": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3085_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3060_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3060_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)4030_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8329",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)4030_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)4030_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8329": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5853",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5853": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5802",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5802": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "268e8fdbe99df7ed3b54f3ff6aae867926e95c77ce88c750cfd09d90a13f6766",
          "withoutMetadata": "a10f7aa119798745ac3b379a85298d5766732c28412e4db0194b2dd076ab6284",
          "linkedWithoutMetadata": "a10f7aa119798745ac3b379a85298d5766732c28412e4db0194b2dd076ab6284"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()",
          "adminConvertEarningsToGFIandBurn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6532",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6532": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8306",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8306": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11678",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11678": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11678",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11678": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11678",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11678": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10498_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10498_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10498_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:36",
        "version": {
          "withMetadata": "00e82d667bcc40ee973a5fd541dd273fe65b7ab03917eb5f9e35bf471635e8e6",
          "withoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516",
          "linkedWithoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:48"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8140",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7311",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8140": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7311": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "8a184e676fe59a557c91ae345fb550bc0433d47679277f2944498ab20751ce8c",
          "withoutMetadata": "b2409860bdf9c9b9355bf871c41a2aab8597e33094890429480dc8b3fca0a598",
          "linkedWithoutMetadata": "b2409860bdf9c9b9355bf871c41a2aab8597e33094890429480dc8b3fca0a598"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "1969820c39766eea35caed9f1da4f43ce57b6be87ac31c84cbd59af5301851d2",
          "withoutMetadata": "da2b94705024293064b4f12457e9c22ca2b7b9097e8dddeb4c42bef2e5679343",
          "linkedWithoutMetadata": "da2b94705024293064b4f12457e9c22ca2b7b9097e8dddeb4c42bef2e5679343"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7311",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3055_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3030_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7311": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3055_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3030_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3030_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3933_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8140",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3933_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3933_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8140": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5756",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5756": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5705",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5705": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "600cc4a8423dfffbaa145e0a06489b5c05d5e4914ad8785da3e817c0f7690ea7",
          "withoutMetadata": "ca105d7b364d41265f1e0759bce574e301f69fefe4875ebfb3d059128e284a34",
          "linkedWithoutMetadata": "ca105d7b364d41265f1e0759bce574e301f69fefe4875ebfb3d059128e284a34"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6343",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6343": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8117",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8117": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11489",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11489": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11489",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11489": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11489",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11489": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10309_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10309_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10309_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:36",
        "version": {
          "withMetadata": "00e82d667bcc40ee973a5fd541dd273fe65b7ab03917eb5f9e35bf471635e8e6",
          "withoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516",
          "linkedWithoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:48"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8140",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7311",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8140": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7311": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "8a184e676fe59a557c91ae345fb550bc0433d47679277f2944498ab20751ce8c",
          "withoutMetadata": "b2409860bdf9c9b9355bf871c41a2aab8597e33094890429480dc8b3fca0a598",
          "linkedWithoutMetadata": "b2409860bdf9c9b9355bf871c41a2aab8597e33094890429480dc8b3fca0a598"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:10",
        "version": {
          "withMetadata": "1969820c39766eea35caed9f1da4f43ce57b6be87ac31c84cbd59af5301851d2",
          "withoutMetadata": "da2b94705024293064b4f12457e9c22ca2b7b9097e8dddeb4c42bef2e5679343",
          "linkedWithoutMetadata": "da2b94705024293064b4f12457e9c22ca2b7b9097e8dddeb4c42bef2e5679343"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7311",
              "src": "contracts/FarmV2.sol:12"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3055_storage",
              "src": "contracts/FarmV2.sol:34"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3030_storage)",
              "src": "contracts/FarmV2.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7311": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3055_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3030_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3030_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3933_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8140",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3933_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3933_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8140": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5756",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5756": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5705",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5705": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "1361ef37313b6e6a8fe56096616e82ec860bb5dd60abc8b37eccee66f84b9e1c",
          "withoutMetadata": "d1400b6cec9b941ad40a128151c57ffb403bed75f64d014561ebfd16c55507f1",
          "linkedWithoutMetadata": "d1400b6cec9b941ad40a128151c57ffb403bed75f64d014561ebfd16c55507f1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6343",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6343": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8117",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8117": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IIncinerator": {
        "src": "contracts/interfaces/IIncinerator.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11489",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11489": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11489",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11489": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11489",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11489": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10309_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10309_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10309_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:36",
        "version": {
          "withMetadata": "00e82d667bcc40ee973a5fd541dd273fe65b7ab03917eb5f9e35bf471635e8e6",
          "withoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516",
          "linkedWithoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:48"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8124",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7302",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8124": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7302": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7302",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3054_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3029_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7302": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3054_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3029_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3029_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3924_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8124",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3924_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3924_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8124": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5747",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5747": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5696",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5696": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:14",
        "version": {
          "withMetadata": "1361ef37313b6e6a8fe56096616e82ec860bb5dd60abc8b37eccee66f84b9e1c",
          "withoutMetadata": "d1400b6cec9b941ad40a128151c57ffb403bed75f64d014561ebfd16c55507f1",
          "linkedWithoutMetadata": "d1400b6cec9b941ad40a128151c57ffb403bed75f64d014561ebfd16c55507f1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setSlippage(uint256)",
          "convertEarningsToGFIandBurn()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Incinerator",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:16"
            },
            {
              "contract": "Incinerator",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:17"
            },
            {
              "contract": "Incinerator",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:18"
            },
            {
              "contract": "Incinerator",
              "label": "router",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:19"
            },
            {
              "contract": "Incinerator",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Incinerator.sol:20"
            },
            {
              "contract": "Incinerator",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/Incinerator.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6334",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6334": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8101",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8101": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11473",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11473": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11473",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11473": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11473",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11473": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10293_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10293_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10293_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:36",
        "version": {
          "withMetadata": "00e82d667bcc40ee973a5fd541dd273fe65b7ab03917eb5f9e35bf471635e8e6",
          "withoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516",
          "linkedWithoutMetadata": "88931011ab9649355fdd1a28cb444638a2ac5561545559b5d2ed17001e735516"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:48"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)7972",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7150",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)7972": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7150": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7150",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3054_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3029_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7150": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3054_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3029_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3029_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3924_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)7972",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3924_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3924_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)7972": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5747",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5747": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5696",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5696": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6182",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6182": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)7949",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)7949": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11321",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11321": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11321",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11321": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11321",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11321": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10141_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10141_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10141_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:36",
        "version": {
          "withMetadata": "b13eb410f396125696b9621ab8f3f0824392e9e55ad2102023e14a8cf18a3678",
          "withoutMetadata": "d77277cdc12c47982f12fb654013cf131ea620eecf57ef1a63991f6d241aff8e",
          "linkedWithoutMetadata": "d77277cdc12c47982f12fb654013cf131ea620eecf57ef1a63991f6d241aff8e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:71"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:62"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:48"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)7972",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7150",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:62"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)7972": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7150": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7150",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3054_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3029_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7150": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3054_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3029_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3029_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3924_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)7972",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3924_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3924_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)7972": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5747",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5747": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5696",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5696": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6182",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6182": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)7949",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)7949": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11321",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11321": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11321",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11321": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11321",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11321": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10141_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10141_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10141_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:37",
        "version": {
          "withMetadata": "d24050132a6c754b37075565c44dc65b8041aca104891dfc8cd24c7add43b9bd",
          "withoutMetadata": "1b9955f8083a7336ad4b253885260b631de71b6ed0631b9c7b578f582b94b27f",
          "linkedWithoutMetadata": "1b9955f8083a7336ad4b253885260b631de71b6ed0631b9c7b578f582b94b27f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:72"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:55"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:63"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)7972",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7150",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:56"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:62"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)7972": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7150": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7150",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3054_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3029_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7150": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3054_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3029_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3029_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3924_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)7972",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3924_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3924_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)7972": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5747",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5747": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5696",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5696": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6182",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6182": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)7949",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)7949": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11321",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11321": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11321",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11321": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11321",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11321": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10141_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10141_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10141_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:37",
        "version": {
          "withMetadata": "1e7d6ac58c73970824750ee9423086a0c7164940fb61b3333410f5b322eb7368",
          "withoutMetadata": "a5492e6f750bc0f26b98bdbfa1f093baab57aefaba7686f02d833717324ebcc2",
          "linkedWithoutMetadata": "a5492e6f750bc0f26b98bdbfa1f093baab57aefaba7686f02d833717324ebcc2"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:72"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:55"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:63"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1140_storage)",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8225",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7151",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:56"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:62"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1140_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1140_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8225": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7151": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7151",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3055_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3030_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7151": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3055_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3030_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3030_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3925_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8225",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3925_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3925_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8225": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5748",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5748": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5697",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5697": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6183",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6183": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8202",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8202": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11574",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11574": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11574",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11574": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11574",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11574": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10394_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10394_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10394_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:38",
        "version": {
          "withMetadata": "8e5b19b10dac960a02e704153c1ebf6fe6f3904959861182cae4e1b5cc694bf5",
          "withoutMetadata": "ea6f8c8357f95230db3fd0bd6246281f2327f2527f6e04ab7c0456636acb7324",
          "linkedWithoutMetadata": "ea6f8c8357f95230db3fd0bd6246281f2327f2527f6e04ab7c0456636acb7324"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:73"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:56"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1141_storage)",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8351",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7152",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:56"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:62"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:63"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1141_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1141_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8351": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7152": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7152",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3056_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3031_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7152": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3056_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3031_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3031_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3926_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8351",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3926_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3926_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8351": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5749",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5749": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5698",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5698": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6184",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6184": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8328",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8328": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11700",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11700": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11700",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11700": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11700",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11700": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10520_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10520_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10520_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:38",
        "version": {
          "withMetadata": "8fb7c0aadf8e7d658d48ad6340e0588a0f60d792822959508146f6560a3544e8",
          "withoutMetadata": "94d2b9cc5a0449fb958fb3beedf31599f4b36e2be9256b5511dae8b84da59ced",
          "linkedWithoutMetadata": "94d2b9cc5a0449fb958fb3beedf31599f4b36e2be9256b5511dae8b84da59ced"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:73"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:56"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1141_storage)",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8356",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7157",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:56"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:62"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:63"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1141_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1141_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8356": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7157": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7157",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3061_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3036_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7157": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3061_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3036_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3036_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3931_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8356",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3931_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3931_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8356": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5754",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5754": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5703",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5703": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6189",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6189": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8333",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8333": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11705",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11705": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11705",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11705": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11705",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11705": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10525_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10525_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10525_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:38",
        "version": {
          "withMetadata": "52f120affc8d2e63838167ef764f432a6b201be443d7efbbc5fb5260df5fff25",
          "withoutMetadata": "02cc7c50eb2efd1ee496b5a356ba1fe6c50cadf3875370d8d192743bb5b2e63f",
          "linkedWithoutMetadata": "02cc7c50eb2efd1ee496b5a356ba1fe6c50cadf3875370d8d192743bb5b2e63f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool,address)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:73"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:56"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1141_storage)",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8356",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7157",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:56"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:57"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:62"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:63"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:64"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1141_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1141_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                },
                {
                  "label": "swapOtherToken",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8356": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7157": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7157",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3061_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3036_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7157": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3061_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3036_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3036_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3931_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8356",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3931_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3931_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8356": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5754",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5754": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5703",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5703": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6189",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6189": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8333",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8333": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11705",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11705": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11705",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11705": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11705",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11705": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10525_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10525_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10525_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:38",
        "version": {
          "withMetadata": "eeb999672e03711979bc262921350dfd50419f281c7515615d149ed53a0aa340",
          "withoutMetadata": "7d94b1b4508a70a34eaf6945577103d9c5589dc2f4e537cbde7b9eb274c3a8e9",
          "linkedWithoutMetadata": "7d94b1b4508a70a34eaf6945577103d9c5589dc2f4e537cbde7b9eb274c3a8e9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:72"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:55"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:63"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8341",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7142",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:56"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:62"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8341": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7142": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7142",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3046_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3021_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7142": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3046_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3021_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3021_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3916_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8341",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3916_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3916_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8341": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5739",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5739": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5688",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5688": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6174",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6174": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8318",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8318": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11690",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11690": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11690",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11690": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11690",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11690": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10510_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10510_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10510_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:38",
        "version": {
          "withMetadata": "3251453768ada9c5ccdbc30b8b24898992d250c59fe059138fb17fa45e086f04",
          "withoutMetadata": "31b03ea19bb748e19ada1334ac9e28e49b7c427c07e202cae2e71113caba83ff",
          "linkedWithoutMetadata": "31b03ea19bb748e19ada1334ac9e28e49b7c427c07e202cae2e71113caba83ff"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:72"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:55"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:63"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8321",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7122",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:56"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:62"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8321": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7122": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7122",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3026_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3001_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7122": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3026_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3001_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3001_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3896_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8321",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3896_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3896_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8321": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5719",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5719": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5668",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5668": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6154",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6154": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8298",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8298": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11670",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11670": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11670",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11670": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11670",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11670": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10490_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10490_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10490_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:38",
        "version": {
          "withMetadata": "8bd262151eb74e344b4c9fb32a652784abf57878e16105346a75c323c1aaffd0",
          "withoutMetadata": "286dec10080f73f97630ad7bd39f5bc0a004a04e956e9bc22c73ce7f1f1621de",
          "linkedWithoutMetadata": "286dec10080f73f97630ad7bd39f5bc0a004a04e956e9bc22c73ce7f1f1621de"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:72"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:55"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:63"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8331",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7132",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:56"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:62"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8331": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7132": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7132",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3036_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3011_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7132": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3036_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3011_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3011_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3906_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8331",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3906_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3906_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8331": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5729",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5729": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5678",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5678": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6164",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6164": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8308",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8308": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11680",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11680": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11680",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11680": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11680",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11680": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10500_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10500_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10500_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Compounder": {
        "src": "contracts/CompoundFactory.sol:38",
        "version": {
          "withMetadata": "f60174dfad0a94001743162f8b05d60572ad91d14eb17865c5556dac82884c1a",
          "withoutMetadata": "0645a5c98765cac88d80a91a40d5d5e937665b4ece78cc8a9855cc0307e6630c",
          "linkedWithoutMetadata": "0645a5c98765cac88d80a91a40d5d5e937665b4ece78cc8a9855cc0307e6630c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address,address)",
          "changeVaultFee(uint256)",
          "changeShareInfo(uint256,uint256,uint256,uint256)",
          "updateSharedVariables(address,address,address,address,address,uint256)",
          "createCompounder(address,address,uint256,uint256,uint256,bool)",
          "depositCompounding(uint256,uint256)",
          "withdrawCompounding(uint256,uint256)",
          "harvestCompounding(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Compounder",
            "src": "contracts/CompoundFactory.sol:72"
          },
          {
            "kind": "state-variable-assignment",
            "name": "vaultFee",
            "src": "contracts/CompoundFactory.sol:55"
          },
          {
            "kind": "state-variable-assignment",
            "name": "slippage",
            "src": "contracts/CompoundFactory.sol:63"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Compounder",
              "label": "fidToShareInfo",
              "type": "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)",
              "src": "contracts/CompoundFactory.sol:49"
            },
            {
              "contract": "Compounder",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8320",
              "src": "contracts/CompoundFactory.sol:50"
            },
            {
              "contract": "Compounder",
              "label": "Factory",
              "type": "t_contract(IFarmFactory)7121",
              "src": "contracts/CompoundFactory.sol:51"
            },
            {
              "contract": "Compounder",
              "label": "ShareTokenImplementation",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:52"
            },
            {
              "contract": "Compounder",
              "label": "getShareToken",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/CompoundFactory.sol:53"
            },
            {
              "contract": "Compounder",
              "label": "allShareTokens",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CompoundFactory.sol:54"
            },
            {
              "contract": "Compounder",
              "label": "vaultFee",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:55"
            },
            {
              "contract": "Compounder",
              "label": "rewardBalance",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:56"
            },
            {
              "contract": "Compounder",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:58"
            },
            {
              "contract": "Compounder",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:59"
            },
            {
              "contract": "Compounder",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:60"
            },
            {
              "contract": "Compounder",
              "label": "swapFactory",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:61"
            },
            {
              "contract": "Compounder",
              "label": "router",
              "type": "t_address",
              "src": "contracts/CompoundFactory.sol:62"
            },
            {
              "contract": "Compounder",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/CompoundFactory.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_struct(ShareInfo)1139_storage)": {
              "label": "mapping(uint256 => struct Compounder.ShareInfo)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(ShareInfo)1139_storage": {
              "label": "struct Compounder.ShareInfo",
              "members": [
                {
                  "label": "depositToken",
                  "type": "t_address"
                },
                {
                  "label": "rewardToken",
                  "type": "t_address"
                },
                {
                  "label": "shareToken",
                  "type": "t_address"
                },
                {
                  "label": "minHarvest",
                  "type": "t_uint256"
                },
                {
                  "label": "maxCallerReward",
                  "type": "t_uint256"
                },
                {
                  "label": "callerFeePercent",
                  "type": "t_uint256"
                },
                {
                  "label": "lpFarm",
                  "type": "t_bool"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(iGravityToken)8320": {
              "label": "contract iGravityToken"
            },
            "t_contract(IFarmFactory)7121": {
              "label": "contract IFarmFactory"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "a25c1a4c76958865f20dc2a639541ead7050727dab18afc7e604b00e92d25d14",
          "withoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536",
          "linkedWithoutMetadata": "1287dafb94eb6bdfe165a02305b4cd82f4bc2b189965952d2ae1fdc8f7a52536"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "62012f018d21ff90b0d4d1a2000ece52dc8959d336d5a82431bd8ee131be3d47",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)7121",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)3025_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)3000_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)7121": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)3025_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)3000_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)3000_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "15a5e27aea2960ef0c7705fb26188e9ea7dcdbb1de37990d5f2f027b338f1b28",
          "withoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5",
          "linkedWithoutMetadata": "d403542385ae2d4e89a3fc4d714270bdbff9804a21c39d6b892285953408f1c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3895_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)8320",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3895_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)3895_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)8320": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5718",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5718": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5667",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5667": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Incinerator": {
        "src": "contracts/Incinerator.sol:9",
        "version": {
          "withMetadata": "ec87574dd112aa54ed36430ad2477c92172b0b7e59241e3e92f4133f8cf3aec0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)6153",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6153": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Share": {
        "src": "contracts/Share.sol:7",
        "version": {
          "withMetadata": "d57c413bde20d734f79f1c50244acf0c070d804e9018af31f2d2502079f59388",
          "withoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17",
          "linkedWithoutMetadata": "f9f529976976627826f0a0d18ad504cb194460289fbfed86bb2cbc5efd2b8d17"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Share",
            "src": "contracts/Share.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)8297",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)8297": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IShare": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11669",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)11669": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11669",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)11669": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)11669",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)11669": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)10489_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)10489_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)10489_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "508dd050c5d77aca56e89014373c8de6a47bda85af97fa5b461a77a568c02e8c",
          "withoutMetadata": "c342f35e7f824e2e50be193f2f8ff05ac71a0f9e5971e467cf74f56ad0aed810",
          "linkedWithoutMetadata": "c342f35e7f824e2e50be193f2f8ff05ac71a0f9e5971e467cf74f56ad0aed810"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarmIndex",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "591a8d67443712ef133e84fdd3fd82ce023a5a54bbf2ec5869ab4c3fd835be86",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)6641",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)1818_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)1793_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)6641": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)1818_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)1793_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)1793_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "0bb6f553cc87285ae9a018d89c51e446d69a47f81efdd558fcd25418d3931aa8",
          "withoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6",
          "linkedWithoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)2688_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)6877",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)2688_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)2688_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)6877": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernanceV1": {
        "src": "contracts/GovernanceV1.sol:15",
        "version": {
          "withMetadata": "eba670a9d7020489b710de5a75d313ed96dc6d21b23a912dd13f152fc9873e81",
          "withoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6",
          "linkedWithoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernanceV1",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernanceV1.sol:16"
            },
            {
              "contract": "GovernanceV1",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/GovernanceV1.sol:17"
            },
            {
              "contract": "GovernanceV1",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3549_storage)",
              "src": "contracts/GovernanceV1.sol:23"
            },
            {
              "contract": "GovernanceV1",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/GovernanceV1.sol:24"
            },
            {
              "contract": "GovernanceV1",
              "label": "GFI",
              "type": "t_contract(iGravityToken)6877",
              "src": "contracts/GovernanceV1.sol:25"
            },
            {
              "contract": "GovernanceV1",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GovernanceV1.sol:26"
            },
            {
              "contract": "GovernanceV1",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GovernanceV1.sol:27"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3549_storage)": {
              "label": "mapping(address => struct GovernanceV1.FeeLedger)"
            },
            "t_struct(FeeLedger)3549_storage": {
              "label": "struct GovernanceV1.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)6877": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5303",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5303": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5252",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5252": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)5728",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)5728": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)6854",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6854": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "getFarmIndex(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IShare.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)",
          "changeName(string)",
          "changeSymbol(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10226",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)10226": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10226",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)10226": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10226",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)10226": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)9046_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)9046_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)9046_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "98a14fafb31636368f7fced21648f80bdd3016dcb078b504004892d1821cfbfc",
          "withoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff",
          "linkedWithoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "84fda69b28ac236d4968e85f99b51e4c12dfd32e7d77afc8dd68eae4433610c5",
          "withoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c",
          "linkedWithoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "465058de608d2bd6dd5a86fc8387e047ef94298ea44a7d82c386e673e216916f",
          "withoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022",
          "linkedWithoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "026249dd93e3227953313e948596155591dca4f219eba4da9f3719a7bbb87b00",
          "withoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49",
          "linkedWithoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "9a67532c037e62df9692ae9be5142780fd5d992e1a90c127a4084e26bd2cc850",
          "withoutMetadata": "5063b6bb331c28c3090165102123c0315c6a7dca68b846f301aa83e6c9aaea9f",
          "linkedWithoutMetadata": "5063b6bb331c28c3090165102123c0315c6a7dca68b846f301aa83e6c9aaea9f"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "e04736b6a5d4eae34d5b1ea15f71d5fa57231ca704c6d0f5b3ceb7e6be5dbbc6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "98a14fafb31636368f7fced21648f80bdd3016dcb078b504004892d1821cfbfc",
          "withoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff",
          "linkedWithoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "84fda69b28ac236d4968e85f99b51e4c12dfd32e7d77afc8dd68eae4433610c5",
          "withoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c",
          "linkedWithoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "465058de608d2bd6dd5a86fc8387e047ef94298ea44a7d82c386e673e216916f",
          "withoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022",
          "linkedWithoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "026249dd93e3227953313e948596155591dca4f219eba4da9f3719a7bbb87b00",
          "withoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49",
          "linkedWithoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "9a67532c037e62df9692ae9be5142780fd5d992e1a90c127a4084e26bd2cc850",
          "withoutMetadata": "5063b6bb331c28c3090165102123c0315c6a7dca68b846f301aa83e6c9aaea9f",
          "linkedWithoutMetadata": "5063b6bb331c28c3090165102123c0315c6a7dca68b846f301aa83e6c9aaea9f"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "e04736b6a5d4eae34d5b1ea15f71d5fa57231ca704c6d0f5b3ceb7e6be5dbbc6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "98a14fafb31636368f7fced21648f80bdd3016dcb078b504004892d1821cfbfc",
          "withoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff",
          "linkedWithoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "84fda69b28ac236d4968e85f99b51e4c12dfd32e7d77afc8dd68eae4433610c5",
          "withoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c",
          "linkedWithoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "465058de608d2bd6dd5a86fc8387e047ef94298ea44a7d82c386e673e216916f",
          "withoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022",
          "linkedWithoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "026249dd93e3227953313e948596155591dca4f219eba4da9f3719a7bbb87b00",
          "withoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49",
          "linkedWithoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "9a67532c037e62df9692ae9be5142780fd5d992e1a90c127a4084e26bd2cc850",
          "withoutMetadata": "5063b6bb331c28c3090165102123c0315c6a7dca68b846f301aa83e6c9aaea9f",
          "linkedWithoutMetadata": "5063b6bb331c28c3090165102123c0315c6a7dca68b846f301aa83e6c9aaea9f"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "e04736b6a5d4eae34d5b1ea15f71d5fa57231ca704c6d0f5b3ceb7e6be5dbbc6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "98a14fafb31636368f7fced21648f80bdd3016dcb078b504004892d1821cfbfc",
          "withoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff",
          "linkedWithoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "84fda69b28ac236d4968e85f99b51e4c12dfd32e7d77afc8dd68eae4433610c5",
          "withoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c",
          "linkedWithoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "465058de608d2bd6dd5a86fc8387e047ef94298ea44a7d82c386e673e216916f",
          "withoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022",
          "linkedWithoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "026249dd93e3227953313e948596155591dca4f219eba4da9f3719a7bbb87b00",
          "withoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49",
          "linkedWithoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "9a67532c037e62df9692ae9be5142780fd5d992e1a90c127a4084e26bd2cc850",
          "withoutMetadata": "5063b6bb331c28c3090165102123c0315c6a7dca68b846f301aa83e6c9aaea9f",
          "linkedWithoutMetadata": "5063b6bb331c28c3090165102123c0315c6a7dca68b846f301aa83e6c9aaea9f"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "e04736b6a5d4eae34d5b1ea15f71d5fa57231ca704c6d0f5b3ceb7e6be5dbbc6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "98a14fafb31636368f7fced21648f80bdd3016dcb078b504004892d1821cfbfc",
          "withoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff",
          "linkedWithoutMetadata": "7855c58649298d6fe5a20dcdba0823c0373bb241ea06e88e7965d5afbe253eff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "84fda69b28ac236d4968e85f99b51e4c12dfd32e7d77afc8dd68eae4433610c5",
          "withoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c",
          "linkedWithoutMetadata": "cb40287946e682047aff777eeedf9bbfc90bde620e82e9cf88d26939f862ce0c"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "465058de608d2bd6dd5a86fc8387e047ef94298ea44a7d82c386e673e216916f",
          "withoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022",
          "linkedWithoutMetadata": "a8751d1d45042b68660428a1d011bfe5a6519ed6aaa1cfb16f1f6cff53c8a022"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "026249dd93e3227953313e948596155591dca4f219eba4da9f3719a7bbb87b00",
          "withoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49",
          "linkedWithoutMetadata": "b8a7f485be8f8c7521c8c6b228dd56f386838ded6ae6f530194282ad14d1ef49"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "9a67532c037e62df9692ae9be5142780fd5d992e1a90c127a4084e26bd2cc850",
          "withoutMetadata": "5063b6bb331c28c3090165102123c0315c6a7dca68b846f301aa83e6c9aaea9f",
          "linkedWithoutMetadata": "5063b6bb331c28c3090165102123c0315c6a7dca68b846f301aa83e6c9aaea9f"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "e04736b6a5d4eae34d5b1ea15f71d5fa57231ca704c6d0f5b3ceb7e6be5dbbc6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "f1d90cb6c8f81c61fe72857340db25400d728790f3875790729cd8469ed5bb19",
          "withoutMetadata": "4210a760b2be624e1cc138e393128b1ca7b0a1ec5802fa10478e02838e813220",
          "linkedWithoutMetadata": "4210a760b2be624e1cc138e393128b1ca7b0a1ec5802fa10478e02838e813220"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "00c18308e3eb47ffe5b49153b17a44a255277c0b57307a94cb1488a96b94edb2",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)6617",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)1803_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)1778_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)6617": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)1803_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)1778_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)1778_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "0bb6f553cc87285ae9a018d89c51e446d69a47f81efdd558fcd25418d3931aa8",
          "withoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6",
          "linkedWithoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)2673_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)6823",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)2673_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)2673_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)6823": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernanceV1": {
        "src": "contracts/GovernanceV1.sol:15",
        "version": {
          "withMetadata": "eba670a9d7020489b710de5a75d313ed96dc6d21b23a912dd13f152fc9873e81",
          "withoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6",
          "linkedWithoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernanceV1",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernanceV1.sol:16"
            },
            {
              "contract": "GovernanceV1",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/GovernanceV1.sol:17"
            },
            {
              "contract": "GovernanceV1",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3534_storage)",
              "src": "contracts/GovernanceV1.sol:23"
            },
            {
              "contract": "GovernanceV1",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/GovernanceV1.sol:24"
            },
            {
              "contract": "GovernanceV1",
              "label": "GFI",
              "type": "t_contract(iGravityToken)6823",
              "src": "contracts/GovernanceV1.sol:25"
            },
            {
              "contract": "GovernanceV1",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GovernanceV1.sol:26"
            },
            {
              "contract": "GovernanceV1",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GovernanceV1.sol:27"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3534_storage)": {
              "label": "mapping(address => struct GovernanceV1.FeeLedger)"
            },
            "t_struct(FeeLedger)3534_storage": {
              "label": "struct GovernanceV1.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)6823": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5288",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5288": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5237",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5237": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)5713",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)5713": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)6800",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6800": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()",
          "allFarms(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "pendingReward(address)",
          "userInfo(address)",
          "farmInfo()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10172",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)10172": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10172",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)10172": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10172",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)10172": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)8992_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)8992_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)8992_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "cc5720553113f1020c4c8319d72d372b9b556edf0c967942393ae6d9ed904db1",
          "withoutMetadata": "9b9d99bc020c03f6d1613597c61f97bbb07d489bd884686e540b25aa86b9112e",
          "linkedWithoutMetadata": "9b9d99bc020c03f6d1613597c61f97bbb07d489bd884686e540b25aa86b9112e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "setHarvestFee(uint256)",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:16"
            },
            {
              "contract": "FarmFactory",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/FarmFactory.sol:17"
            },
            {
              "contract": "FarmFactory",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:18"
            },
            {
              "contract": "FarmFactory",
              "label": "incinerator",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:19"
            },
            {
              "contract": "FarmFactory",
              "label": "harvestFee",
              "type": "t_uint256",
              "src": "contracts/FarmFactory.sol:20"
            },
            {
              "contract": "FarmFactory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:21"
            },
            {
              "contract": "FarmFactory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:9",
        "version": {
          "withMetadata": "9cc2a514d462a34ef88ebdb46509fd620c76397338c38d2fe4d2c7febeab7266",
          "withoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1",
          "linkedWithoutMetadata": "3a45e5cb19c31a84316b6e530db64c8a8d9d09dd4312d876b9fc5e12819ba5d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "sendEarningsToIncinerator()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:10"
            },
            {
              "contract": "FarmV2",
              "label": "FARMFACTORY",
              "type": "t_contract(IFarmFactory)6792",
              "src": "contracts/FarmV2.sol:11"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)1803_storage",
              "src": "contracts/FarmV2.sol:33"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)1778_storage)",
              "src": "contracts/FarmV2.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IFarmFactory)6792": {
              "label": "contract IFarmFactory"
            },
            "t_struct(FarmInfo)1803_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)1778_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)1778_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "0bb6f553cc87285ae9a018d89c51e446d69a47f81efdd558fcd25418d3931aa8",
          "withoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6",
          "linkedWithoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)2673_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)6947",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)2673_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)2673_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)6947": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernanceV1": {
        "src": "contracts/GovernanceV1.sol:15",
        "version": {
          "withMetadata": "eba670a9d7020489b710de5a75d313ed96dc6d21b23a912dd13f152fc9873e81",
          "withoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6",
          "linkedWithoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernanceV1",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernanceV1.sol:16"
            },
            {
              "contract": "GovernanceV1",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/GovernanceV1.sol:17"
            },
            {
              "contract": "GovernanceV1",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3534_storage)",
              "src": "contracts/GovernanceV1.sol:23"
            },
            {
              "contract": "GovernanceV1",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/GovernanceV1.sol:24"
            },
            {
              "contract": "GovernanceV1",
              "label": "GFI",
              "type": "t_contract(iGravityToken)6947",
              "src": "contracts/GovernanceV1.sol:25"
            },
            {
              "contract": "GovernanceV1",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GovernanceV1.sol:26"
            },
            {
              "contract": "GovernanceV1",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GovernanceV1.sol:27"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3534_storage)": {
              "label": "mapping(address => struct GovernanceV1.FeeLedger)"
            },
            "t_struct(FeeLedger)3534_storage": {
              "label": "struct GovernanceV1.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)6947": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5288",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5288": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5237",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5237": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)5713",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)5713": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGFIFarm": {
        "src": "contracts/Vault_CompoundingGFI.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address)",
          "deposit(uint256)",
          "pendingReward(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VaultCompGFI": {
        "src": "contracts/Vault_CompoundingGFI.sol:17",
        "version": {
          "withMetadata": "1eed7ba0749f1e2dc0c965d163d6119a97b9fb57abec3fd72524c2a700fecb34",
          "withoutMetadata": "22d402929ed9de53264d42bcadb9dee3039df2a6aba1eaa1853289fc86ed2f97",
          "linkedWithoutMetadata": "22d402929ed9de53264d42bcadb9dee3039df2a6aba1eaa1853289fc86ed2f97"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "harvest()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultCompGFI",
            "src": "contracts/Vault_CompoundingGFI.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultCompGFI",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Vault_CompoundingGFI.sol:18"
            },
            {
              "contract": "VaultCompGFI",
              "label": "Farm",
              "type": "t_contract(IGFIFarm)5742",
              "src": "contracts/Vault_CompoundingGFI.sol:19"
            },
            {
              "contract": "VaultCompGFI",
              "label": "harvestThreshold",
              "type": "t_uint256",
              "src": "contracts/Vault_CompoundingGFI.sol:20"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IGFIFarm)5742": {
              "label": "contract IGFIFarm"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)6924",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6924": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)",
          "whitelist(address)",
          "governance()",
          "incinerator()",
          "harvestFee()",
          "gfi()",
          "feeManager()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10296",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)10296": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10296",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)10296": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10296",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)10296": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)9116_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)9116_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)9116_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IFarmFactory": {
        "src": "contracts/interfaces/IFarmFactory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getFarm(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:18",
        "version": {
          "withMetadata": "6c73e5943e1082a450e3615517bffbc5048bdf384562806d24beea9e1720b6a6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FarmFactory": {
        "src": "contracts/FarmFactory.sol:11",
        "version": {
          "withMetadata": "d9c527b0d9bba0d72373a8221862307b7247632c4885bbde0fce0e8e2a6b9267",
          "withoutMetadata": "87cccb63616f022114b5b8a57d02e94b28b5c2087a4dfbc066fce1e52dcd7ba1",
          "linkedWithoutMetadata": "87cccb63616f022114b5b8a57d02e94b28b5c2087a4dfbc066fce1e52dcd7ba1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "Clones"
        ],
        "methods": [
          "()",
          "createFarm(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "approveOrRevokeFarm(bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmFactory",
            "src": "contracts/FarmFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmFactory",
              "label": "FarmImplementation",
              "type": "t_address",
              "src": "contracts/FarmFactory.sol:13"
            },
            {
              "contract": "FarmFactory",
              "label": "FarmValid",
              "type": "t_mapping(t_bytes32,t_bool)",
              "src": "contracts/FarmFactory.sol:14"
            },
            {
              "contract": "FarmFactory",
              "label": "getFarm",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/FarmFactory.sol:15"
            },
            {
              "contract": "FarmFactory",
              "label": "allFarms",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/FarmFactory.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FarmV2": {
        "src": "contracts/FarmV2.sol:7",
        "version": {
          "withMetadata": "89ae68647cbee9898714b13295afe4f65225ff992db12b4303d75b0277198275",
          "withoutMetadata": "5efde42dd8d9561b5367ae4d37aa63b5888b56c9039961da35611c774af3d487",
          "linkedWithoutMetadata": "5efde42dd8d9561b5367ae4d37aa63b5888b56c9039961da35611c774af3d487"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "init(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmV2",
            "src": "contracts/FarmV2.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmV2",
              "label": "FarmFactory",
              "type": "t_address",
              "src": "contracts/FarmV2.sol:8"
            },
            {
              "contract": "FarmV2",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)1724_storage",
              "src": "contracts/FarmV2.sol:29"
            },
            {
              "contract": "FarmV2",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)1699_storage)",
              "src": "contracts/FarmV2.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(FarmInfo)1724_storage": {
              "label": "struct FarmV2.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)1029"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)1699_storage)": {
              "label": "mapping(address => struct FarmV2.UserInfo)"
            },
            "t_struct(UserInfo)1699_storage": {
              "label": "struct FarmV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "0bb6f553cc87285ae9a018d89c51e446d69a47f81efdd558fcd25418d3931aa8",
          "withoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6",
          "linkedWithoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)2468_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)6697",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)2468_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)2468_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)6697": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernanceV1": {
        "src": "contracts/GovernanceV1.sol:15",
        "version": {
          "withMetadata": "eba670a9d7020489b710de5a75d313ed96dc6d21b23a912dd13f152fc9873e81",
          "withoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6",
          "linkedWithoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernanceV1",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernanceV1.sol:16"
            },
            {
              "contract": "GovernanceV1",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/GovernanceV1.sol:17"
            },
            {
              "contract": "GovernanceV1",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)3329_storage)",
              "src": "contracts/GovernanceV1.sol:23"
            },
            {
              "contract": "GovernanceV1",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/GovernanceV1.sol:24"
            },
            {
              "contract": "GovernanceV1",
              "label": "GFI",
              "type": "t_contract(iGravityToken)6697",
              "src": "contracts/GovernanceV1.sol:25"
            },
            {
              "contract": "GovernanceV1",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GovernanceV1.sol:26"
            },
            {
              "contract": "GovernanceV1",
              "label": "WBTC",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GovernanceV1.sol:27"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)3329_storage)": {
              "label": "mapping(address => struct GovernanceV1.FeeLedger)"
            },
            "t_struct(FeeLedger)3329_storage": {
              "label": "struct GovernanceV1.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)6697": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)5083",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)5083": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)5032",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)5032": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)5508",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)5508": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IGFIFarm": {
        "src": "contracts/Vault_CompoundingGFI.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address)",
          "deposit(uint256)",
          "pendingReward(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VaultCompGFI": {
        "src": "contracts/Vault_CompoundingGFI.sol:17",
        "version": {
          "withMetadata": "1eed7ba0749f1e2dc0c965d163d6119a97b9fb57abec3fd72524c2a700fecb34",
          "withoutMetadata": "22d402929ed9de53264d42bcadb9dee3039df2a6aba1eaa1853289fc86ed2f97",
          "linkedWithoutMetadata": "22d402929ed9de53264d42bcadb9dee3039df2a6aba1eaa1853289fc86ed2f97"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "harvest()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultCompGFI",
            "src": "contracts/Vault_CompoundingGFI.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultCompGFI",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/Vault_CompoundingGFI.sol:18"
            },
            {
              "contract": "VaultCompGFI",
              "label": "Farm",
              "type": "t_contract(IGFIFarm)5537",
              "src": "contracts/Vault_CompoundingGFI.sol:19"
            },
            {
              "contract": "VaultCompGFI",
              "label": "harvestThreshold",
              "type": "t_uint256",
              "src": "contracts/Vault_CompoundingGFI.sol:20"
            }
          ],
          "types": {
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(IGFIFarm)5537": {
              "label": "contract IGFIFarm"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)1029",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)6674",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)1029": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)6674": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/helper/MockERC20.sol:6",
        "version": {
          "withMetadata": "3e6880190ae667d5e65cd62efa0d7034c22d45f4d89699ad185f50cd9c1b661f",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/helper/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/helper/mockWBTC.sol:6",
        "version": {
          "withMetadata": "d600885d41da9569b7220594e52578a3cc2381829e4c261488869ea064dc6b14",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/helper/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/helper/mockWETH.sol:6",
        "version": {
          "withMetadata": "064d325e05e9a4f3fdb7ee959bc2ef19d12e6994d80fe130225dc0f6f50ed7b6",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/helper/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFarmV2": {
        "src": "contracts/interfaces/IFarmV2.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()",
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10046",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)10046": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10046",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)10046": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)10046",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)10046": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)8866_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)8866_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)8866_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "8c62265e068a5f85e797d1ed0fd10ff769ccbebf9712e3253e97ac367bb913af",
          "withoutMetadata": "114c2168b8c297f59ecf6530efa67374b1abb54f7c67bcc5524bd3f49b8b5b69",
          "linkedWithoutMetadata": "114c2168b8c297f59ecf6530efa67374b1abb54f7c67bcc5524bd3f49b8b5b69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "a064e8ae81fb7adc88755d7e70e2d8b65cc23c0c54823daefd371fc4f6d8598c",
          "withoutMetadata": "ec4e7411e1d2cb91d8281332fca12bb1a35775b52a9c9180a648b89db5ac0ae0",
          "linkedWithoutMetadata": "ec4e7411e1d2cb91d8281332fca12bb1a35775b52a9c9180a648b89db5ac0ae0"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "c108cec3445f8f13d487a6fa92b8440741c6b3fb60d0520bb0de94a631cba13d",
          "withoutMetadata": "3c6a398d2cde1969d4f3a00891706f08dcb535c58c7f5f8679ac89674e7692d7",
          "linkedWithoutMetadata": "3c6a398d2cde1969d4f3a00891706f08dcb535c58c7f5f8679ac89674e7692d7"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "f2907bbc2e641dd015d2bf17c8506442c881d5177511e8166e8f68dbbe732652",
          "withoutMetadata": "9abbcadb5393e8cb0036df1dce3a5b2fd14c37c4d6fd1ecff2b4b17449889367",
          "linkedWithoutMetadata": "9abbcadb5393e8cb0036df1dce3a5b2fd14c37c4d6fd1ecff2b4b17449889367"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "ea75be8af45cc277ae61549b2c144f9f2360e7a9c7f55d8d6e3468ed9f2abf5d",
          "withoutMetadata": "e0888531b5f490177c70b2101bbda90180e2d1ac9ac9816d71c2040ef910cccd",
          "linkedWithoutMetadata": "e0888531b5f490177c70b2101bbda90180e2d1ac9ac9816d71c2040ef910cccd"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "e04736b6a5d4eae34d5b1ea15f71d5fa57231ca704c6d0f5b3ceb7e6be5dbbc6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "8c62265e068a5f85e797d1ed0fd10ff769ccbebf9712e3253e97ac367bb913af",
          "withoutMetadata": "114c2168b8c297f59ecf6530efa67374b1abb54f7c67bcc5524bd3f49b8b5b69",
          "linkedWithoutMetadata": "114c2168b8c297f59ecf6530efa67374b1abb54f7c67bcc5524bd3f49b8b5b69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "a064e8ae81fb7adc88755d7e70e2d8b65cc23c0c54823daefd371fc4f6d8598c",
          "withoutMetadata": "ec4e7411e1d2cb91d8281332fca12bb1a35775b52a9c9180a648b89db5ac0ae0",
          "linkedWithoutMetadata": "ec4e7411e1d2cb91d8281332fca12bb1a35775b52a9c9180a648b89db5ac0ae0"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "c108cec3445f8f13d487a6fa92b8440741c6b3fb60d0520bb0de94a631cba13d",
          "withoutMetadata": "3c6a398d2cde1969d4f3a00891706f08dcb535c58c7f5f8679ac89674e7692d7",
          "linkedWithoutMetadata": "3c6a398d2cde1969d4f3a00891706f08dcb535c58c7f5f8679ac89674e7692d7"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "f2907bbc2e641dd015d2bf17c8506442c881d5177511e8166e8f68dbbe732652",
          "withoutMetadata": "9abbcadb5393e8cb0036df1dce3a5b2fd14c37c4d6fd1ecff2b4b17449889367",
          "linkedWithoutMetadata": "9abbcadb5393e8cb0036df1dce3a5b2fd14c37c4d6fd1ecff2b4b17449889367"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "ea75be8af45cc277ae61549b2c144f9f2360e7a9c7f55d8d6e3468ed9f2abf5d",
          "withoutMetadata": "e0888531b5f490177c70b2101bbda90180e2d1ac9ac9816d71c2040ef910cccd",
          "linkedWithoutMetadata": "e0888531b5f490177c70b2101bbda90180e2d1ac9ac9816d71c2040ef910cccd"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "e04736b6a5d4eae34d5b1ea15f71d5fa57231ca704c6d0f5b3ceb7e6be5dbbc6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/helper/CalHash.sol:5",
        "version": {
          "withMetadata": "8c62265e068a5f85e797d1ed0fd10ff769ccbebf9712e3253e97ac367bb913af",
          "withoutMetadata": "114c2168b8c297f59ecf6530efa67374b1abb54f7c67bcc5524bd3f49b8b5b69",
          "linkedWithoutMetadata": "114c2168b8c297f59ecf6530efa67374b1abb54f7c67bcc5524bd3f49b8b5b69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "a064e8ae81fb7adc88755d7e70e2d8b65cc23c0c54823daefd371fc4f6d8598c",
          "withoutMetadata": "ec4e7411e1d2cb91d8281332fca12bb1a35775b52a9c9180a648b89db5ac0ae0",
          "linkedWithoutMetadata": "ec4e7411e1d2cb91d8281332fca12bb1a35775b52a9c9180a648b89db5ac0ae0"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "c108cec3445f8f13d487a6fa92b8440741c6b3fb60d0520bb0de94a631cba13d",
          "withoutMetadata": "3c6a398d2cde1969d4f3a00891706f08dcb535c58c7f5f8679ac89674e7692d7",
          "linkedWithoutMetadata": "3c6a398d2cde1969d4f3a00891706f08dcb535c58c7f5f8679ac89674e7692d7"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "f2907bbc2e641dd015d2bf17c8506442c881d5177511e8166e8f68dbbe732652",
          "withoutMetadata": "9abbcadb5393e8cb0036df1dce3a5b2fd14c37c4d6fd1ecff2b4b17449889367",
          "linkedWithoutMetadata": "9abbcadb5393e8cb0036df1dce3a5b2fd14c37c4d6fd1ecff2b4b17449889367"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:87"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4801",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4801": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "ea75be8af45cc277ae61549b2c144f9f2360e7a9c7f55d8d6e3468ed9f2abf5d",
          "withoutMetadata": "e0888531b5f490177c70b2101bbda90180e2d1ac9ac9816d71c2040ef910cccd",
          "linkedWithoutMetadata": "e0888531b5f490177c70b2101bbda90180e2d1ac9ac9816d71c2040ef910cccd"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "e04736b6a5d4eae34d5b1ea15f71d5fa57231ca704c6d0f5b3ceb7e6be5dbbc6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "8e72ec0c83d2afc2ce50deeb57017bf232918ab2a2fb27b3c76171fbc032642f",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:52"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FarmTimeLock": {
        "src": "contracts/FarmTimeLock.sol:8",
        "version": {
          "withMetadata": "3a1e972e8bf2af8e01754d0fe77c8e50bc6431be01eec947d239c0e09093beba",
          "withoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e",
          "linkedWithoutMetadata": "d94e39019152c77dc1005ea79a3839499a793895f8119ccfb4f9da2b0466468e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "transferOwnershipFromLock(address,address)",
          "callWithdrawRewards(address,uint256)",
          "withdrawERC20(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmTimeLock",
            "src": "contracts/FarmTimeLock.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FarmTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:10"
            },
            {
              "contract": "FarmTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:11"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:15"
            },
            {
              "contract": "FarmTimeLock",
              "label": "transferOwnershipFromLock_newOwner",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FarmTimeLock.sol:16"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:17"
            },
            {
              "contract": "FarmTimeLock",
              "label": "callWithdrawRewards_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FarmTimeLock.sol:18"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_uint256",
              "src": "contracts/FarmTimeLock.sol:19"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:20"
            },
            {
              "contract": "FarmTimeLock",
              "label": "withdrawERC20_wallet",
              "type": "t_address",
              "src": "contracts/FarmTimeLock.sol:21"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Governance": {
        "src": "contracts/Governance.sol:11",
        "version": {
          "withMetadata": "0bb6f553cc87285ae9a018d89c51e446d69a47f81efdd558fcd25418d3931aa8",
          "withoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6",
          "linkedWithoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Governance",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Governance.sol:12"
            },
            {
              "contract": "Governance",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/Governance.sol:13"
            },
            {
              "contract": "Governance",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)1373_storage)",
              "src": "contracts/Governance.sol:19"
            },
            {
              "contract": "Governance",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/Governance.sol:20"
            },
            {
              "contract": "Governance",
              "label": "GFI",
              "type": "t_contract(iGravityToken)5508",
              "src": "contracts/Governance.sol:21"
            },
            {
              "contract": "Governance",
              "label": "WETH",
              "type": "t_contract(IERC20)949",
              "src": "contracts/Governance.sol:22"
            },
            {
              "contract": "Governance",
              "label": "WBTC",
              "type": "t_contract(IERC20)949",
              "src": "contracts/Governance.sol:23"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)1373_storage)": {
              "label": "mapping(address => struct Governance.FeeLedger)"
            },
            "t_struct(FeeLedger)1373_storage": {
              "label": "struct Governance.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)5508": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)949": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GovernanceV1": {
        "src": "contracts/GovernanceV1.sol:15",
        "version": {
          "withMetadata": "eba670a9d7020489b710de5a75d313ed96dc6d21b23a912dd13f152fc9873e81",
          "withoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6",
          "linkedWithoutMetadata": "6e85883e50f5650075b3225f6cee04ec3460d5f941bba21075489d2433fa42e6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address)",
          "updateFee(address)",
          "claimFee()",
          "delegateFee(address)",
          "withdrawFee()",
          "govAuthTransfer(address,address,uint256)",
          "govAuthTransferFrom(address,address,address,uint256)",
          "depositFee(uint256,uint256)",
          "claimBTC(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "GovernanceV1",
              "label": "feeBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GovernanceV1.sol:16"
            },
            {
              "contract": "GovernanceV1",
              "label": "tokenAddress",
              "type": "t_address",
              "src": "contracts/GovernanceV1.sol:17"
            },
            {
              "contract": "GovernanceV1",
              "label": "feeLedger",
              "type": "t_mapping(t_address,t_struct(FeeLedger)2234_storage)",
              "src": "contracts/GovernanceV1.sol:23"
            },
            {
              "contract": "GovernanceV1",
              "label": "totalFeeCollected",
              "type": "t_uint256",
              "src": "contracts/GovernanceV1.sol:24"
            },
            {
              "contract": "GovernanceV1",
              "label": "GFI",
              "type": "t_contract(iGravityToken)5508",
              "src": "contracts/GovernanceV1.sol:25"
            },
            {
              "contract": "GovernanceV1",
              "label": "WETH",
              "type": "t_contract(IERC20)949",
              "src": "contracts/GovernanceV1.sol:26"
            },
            {
              "contract": "GovernanceV1",
              "label": "WBTC",
              "type": "t_contract(IERC20)949",
              "src": "contracts/GovernanceV1.sol:27"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(FeeLedger)2234_storage)": {
              "label": "mapping(address => struct GovernanceV1.FeeLedger)"
            },
            "t_struct(FeeLedger)2234_storage": {
              "label": "struct GovernanceV1.FeeLedger",
              "members": [
                {
                  "label": "totalFeeCollected_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "totalSupply_LastClaim",
                  "type": "t_uint256"
                },
                {
                  "label": "userBalance_LastClaim",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(iGravityToken)5508": {
              "label": "contract iGravityToken"
            },
            "t_contract(IERC20)949": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityIDO": {
        "src": "contracts/GravityIDO.sol:10",
        "version": {
          "withMetadata": "8aa455e25c96bdaff78f65c165c0f7fe3355edae7262d8d41f50b3f821a8d1e2",
          "withoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c",
          "linkedWithoutMetadata": "4b81a6f234982beac295795d14067e0ff54714610ea77beb23d896a2c195d06c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,bool)",
          "getIOUAddress()",
          "setWETH_ADDRESS(address)",
          "setGFI_ADDRESS(address)",
          "getWETH_ADDRESS()",
          "getGFI_ADDRESS()",
          "getTotalWETHCollected()",
          "buyStake(uint256)",
          "claimStake()",
          "withdraw()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityIDO",
            "src": "contracts/GravityIDO.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleStartTime",
            "src": "contracts/GravityIDO.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "saleEndTime",
            "src": "contracts/GravityIDO.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityIDO",
              "label": "WETH",
              "type": "t_contract(IERC20)949",
              "src": "contracts/GravityIDO.sol:11"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI",
              "type": "t_contract(IERC20)949",
              "src": "contracts/GravityIDO.sol:12"
            },
            {
              "contract": "GravityIDO",
              "label": "IOU",
              "type": "t_contract(IOUToken)3988",
              "src": "contracts/GravityIDO.sol:13"
            },
            {
              "contract": "GravityIDO",
              "label": "WETH_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:14"
            },
            {
              "contract": "GravityIDO",
              "label": "GFI_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityIDO.sol:15"
            },
            {
              "contract": "GravityIDO",
              "label": "totalWETHCollected",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:20"
            },
            {
              "contract": "GravityIDO",
              "label": "GFIforSale",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:23"
            },
            {
              "contract": "GravityIDO",
              "label": "WETHifSoldOut",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:24"
            },
            {
              "contract": "GravityIDO",
              "label": "saleStartTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:25"
            },
            {
              "contract": "GravityIDO",
              "label": "saleEndTime",
              "type": "t_uint256",
              "src": "contracts/GravityIDO.sol:26"
            },
            {
              "contract": "GravityIDO",
              "label": "contributedBal",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/GravityIDO.sol:28"
            },
            {
              "contract": "GravityIDO",
              "label": "ownerShareWithdrawn",
              "type": "t_bool",
              "src": "contracts/GravityIDO.sol:29"
            }
          ],
          "types": {
            "t_contract(IERC20)949": {
              "label": "contract IERC20"
            },
            "t_contract(IOUToken)3988": {
              "label": "contract IOUToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "GravityToken": {
        "src": "contracts/GravityToken.sol:8",
        "version": {
          "withMetadata": "3211f7194f3ebdc66c9712f2a78ceb2497ee924dfb90c322239970bbade0bae0",
          "withoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227",
          "linkedWithoutMetadata": "c324288ccef77133e3eba5d2b4755c7bce3c0fdcd61d6cb8c898ce40cf53d227"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GravityToken",
            "src": "contracts/GravityToken.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GravityToken",
              "label": "GOVERNANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/GravityToken.sol:9"
            },
            {
              "contract": "GravityToken",
              "label": "governor",
              "type": "t_contract(iGovernance)3937",
              "src": "contracts/GravityToken.sol:10"
            },
            {
              "contract": "GravityToken",
              "label": "applyGovernanceForwarding",
              "type": "t_bool",
              "src": "contracts/GravityToken.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(iGovernance)3937": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IOUToken": {
        "src": "contracts/IOUToken.sol:8",
        "version": {
          "withMetadata": "f235828497f170f56bdfd2cd42f15ebd44b3cb1af77f5594ac2c0ac6a160eac8",
          "withoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0",
          "linkedWithoutMetadata": "8914b9c2130bea11b49e662f2023d7fbfceee30ea400b2f809cc2e9b5fe4d5c0"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mintIOU(address,uint256)",
          "burnIOU(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "IOUToken",
            "src": "contracts/IOUToken.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/Locking.sol:8",
        "version": {
          "withMetadata": "6e14786a43bbb9b39f1aa86c13f85beb26adfb6b1ac48992e11c4ea1aaab3a59",
          "withoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1",
          "linkedWithoutMetadata": "ff5e361a6b7a7fcc1b0285f04e2682c07810061472b95162093b9113480b37b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locking",
            "src": "contracts/Locking.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:9"
            },
            {
              "contract": "Locking",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/Locking.sol:10"
            },
            {
              "contract": "Locking",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/Locking.sol:11"
            },
            {
              "contract": "Locking",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:12"
            },
            {
              "contract": "Locking",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:13"
            },
            {
              "contract": "Locking",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:14"
            },
            {
              "contract": "Locking",
              "label": "GFI",
              "type": "t_contract(IERC20)949",
              "src": "contracts/Locking.sol:15"
            },
            {
              "contract": "Locking",
              "label": "WETH",
              "type": "t_contract(IERC20)949",
              "src": "contracts/Locking.sol:16"
            },
            {
              "contract": "Locking",
              "label": "Governor",
              "type": "t_contract(iGovernance)4413",
              "src": "contracts/Locking.sol:17"
            },
            {
              "contract": "Locking",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/Locking.sol:18"
            },
            {
              "contract": "Locking",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:19"
            },
            {
              "contract": "Locking",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IERC20)949": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)4413": {
              "label": "contract iGovernance"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockToken": {
        "src": "contracts/MockERC20.sol:6",
        "version": {
          "withMetadata": "656364e451621768eb3aff922c94ec0bb4f24187cbaf5ac76fadd8724edf7843",
          "withoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243",
          "linkedWithoutMetadata": "e345f1376b9feea3f1322d1a8c17b666cc8e59f0cbb71f6a80d2f247347f4243"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockToken",
            "src": "contracts/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IGFIFarm": {
        "src": "contracts/Vault_CompoundingGFI.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address)",
          "deposit(uint256)",
          "pendingReward(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "VaultCompGFI": {
        "src": "contracts/Vault_CompoundingGFI.sol:17",
        "version": {
          "withMetadata": "1eed7ba0749f1e2dc0c965d163d6119a97b9fb57abec3fd72524c2a700fecb34",
          "withoutMetadata": "22d402929ed9de53264d42bcadb9dee3039df2a6aba1eaa1853289fc86ed2f97",
          "linkedWithoutMetadata": "22d402929ed9de53264d42bcadb9dee3039df2a6aba1eaa1853289fc86ed2f97"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "harvest()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VaultCompGFI",
            "src": "contracts/Vault_CompoundingGFI.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VaultCompGFI",
              "label": "GFI",
              "type": "t_contract(IERC20)949",
              "src": "contracts/Vault_CompoundingGFI.sol:18"
            },
            {
              "contract": "VaultCompGFI",
              "label": "Farm",
              "type": "t_contract(IGFIFarm)4504",
              "src": "contracts/Vault_CompoundingGFI.sol:19"
            },
            {
              "contract": "VaultCompGFI",
              "label": "harvestThreshold",
              "type": "t_uint256",
              "src": "contracts/Vault_CompoundingGFI.sol:20"
            }
          ],
          "types": {
            "t_contract(IERC20)949": {
              "label": "contract IERC20"
            },
            "t_contract(IGFIFarm)4504": {
              "label": "contract IGFIFarm"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "VestingV2": {
        "src": "contracts/VestingV2.sol:9",
        "version": {
          "withMetadata": "2e487639efa00facdd44c3b9e9569d4f8862a1d872323689a8e366cba09bd9b0",
          "withoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b",
          "linkedWithoutMetadata": "b83a0458ced4030c9dc426abb466af50a3203e92f4022241d15f0bdb45a41f6b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,uint256,uint256)",
          "setGovenorAddress(address)",
          "setFeeCollectionBool(bool)",
          "getLastFeeUpdate()",
          "setCallersShare(uint256)",
          "addUser(address,uint256)",
          "updateWithdrawableFee()",
          "collectFee()",
          "claimGFI()",
          "withdrawAll()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "VestingV2",
            "src": "contracts/VestingV2.sol:28"
          },
          {
            "kind": "state-variable-assignment",
            "name": "callersShare",
            "src": "contracts/VestingV2.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "VestingV2",
              "label": "GFIbalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:10"
            },
            {
              "contract": "VestingV2",
              "label": "withdrawableFee",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:11"
            },
            {
              "contract": "VestingV2",
              "label": "callersShare",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:12"
            },
            {
              "contract": "VestingV2",
              "label": "users",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/VestingV2.sol:13"
            },
            {
              "contract": "VestingV2",
              "label": "userCount",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:14"
            },
            {
              "contract": "VestingV2",
              "label": "totalBalance",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:15"
            },
            {
              "contract": "VestingV2",
              "label": "lastFeeUpdate",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:16"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodTimeStamp",
              "type": "t_array(t_uint256)10_storage",
              "src": "contracts/VestingV2.sol:17"
            },
            {
              "contract": "VestingV2",
              "label": "subVestingPeriodClaimed",
              "type": "t_mapping(t_address,t_array(t_bool)10_storage)",
              "src": "contracts/VestingV2.sol:18"
            },
            {
              "contract": "VestingV2",
              "label": "periodAmount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/VestingV2.sol:19"
            },
            {
              "contract": "VestingV2",
              "label": "GFI",
              "type": "t_contract(IERC20)949",
              "src": "contracts/VestingV2.sol:20"
            },
            {
              "contract": "VestingV2",
              "label": "WETH",
              "type": "t_contract(IERC20)949",
              "src": "contracts/VestingV2.sol:21"
            },
            {
              "contract": "VestingV2",
              "label": "Governor",
              "type": "t_contract(iGovernance)5485",
              "src": "contracts/VestingV2.sol:22"
            },
            {
              "contract": "VestingV2",
              "label": "GOVERANCE_ADDRESS",
              "type": "t_address",
              "src": "contracts/VestingV2.sol:23"
            },
            {
              "contract": "VestingV2",
              "label": "LockStart",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:24"
            },
            {
              "contract": "VestingV2",
              "label": "LockEnd",
              "type": "t_uint256",
              "src": "contracts/VestingV2.sol:25"
            },
            {
              "contract": "VestingV2",
              "label": "stopFeeCollection",
              "type": "t_bool",
              "src": "contracts/VestingV2.sol:26"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)10_storage": {
              "label": "uint256[10]"
            },
            "t_mapping(t_address,t_array(t_bool)10_storage)": {
              "label": "mapping(address => bool[10])"
            },
            "t_array(t_bool)10_storage": {
              "label": "bool[10]"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IERC20)949": {
              "label": "contract IERC20"
            },
            "t_contract(iGovernance)5485": {
              "label": "contract iGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletTimeLock": {
        "src": "contracts/WalletTimeLock.sol:8",
        "version": {
          "withMetadata": "b62e04a8e53913d6cb259b37cff603bc1c356df15b375afabbb64aa299e6641e",
          "withoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c",
          "linkedWithoutMetadata": "c5b978e0098e69f1ab80e3da3bc0688d71dc69fcdaa2026c34a5a6070d19786c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256)",
          "withdrawERC20(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletTimeLock",
            "src": "contracts/WalletTimeLock.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletTimeLock",
              "label": "lockLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:10"
            },
            {
              "contract": "WalletTimeLock",
              "label": "graceLength",
              "type": "t_uint256",
              "src": "contracts/WalletTimeLock.sol:11"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_timestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:13"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_token",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/WalletTimeLock.sol:14"
            },
            {
              "contract": "WalletTimeLock",
              "label": "withdrawERC20_amount",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WalletTimeLock.sol:15"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFarm": {
        "src": "contracts/interfaces/IFarm.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawRewards(uint256)",
          "transferOwnership(address)",
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGravityToken": {
        "src": "contracts/interfaces/iGravityToken.sol:7",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "setGovernanceAddress(address)",
          "changeGovernanceForwarding(bool)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWBTC": {
        "src": "contracts/mockWBTC.sol:6",
        "version": {
          "withMetadata": "b6a693d87382013dfc179092d9654e385dc65a1c2f28440510daa97f5b1d9927",
          "withoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902",
          "linkedWithoutMetadata": "6ce0392934bc9d78cb04a16d5b780a341e284fad3b183716887283763b8a0902"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWBTC",
            "src": "contracts/mockWBTC.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockWETH": {
        "src": "contracts/mockWETH.sol:6",
        "version": {
          "withMetadata": "712838136c39683808d45e39af239487b88d2f1437b619784b5c64728d3f5010",
          "withoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0",
          "linkedWithoutMetadata": "fc74546560dc1e18db9cf7075fa28db2a78b24436dc99e2077f59801350edaa0"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mintMeTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockWETH",
            "src": "contracts/mockWETH.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EarningsManager": {
        "src": "contracts/uniswapv2/EarningsManager.sol:16",
        "version": {
          "withMetadata": "e463aa143178187ef7fe6185a7040971427e37c5b69e210c78fee5f6aa305395",
          "withoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c",
          "linkedWithoutMetadata": "ba179ba7520e3850699ab595774465e8e9a4068a711d7078a055a599cd7e734c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "addSwapPair(address)",
          "adjustWhitelist(address,bool)",
          "validTimeWindow(address)",
          "oracleProcessEarnings(address)",
          "manualProcessEarnings(address,uint256[2])",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EarningsManager",
            "src": "contracts/uniswapv2/EarningsManager.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "EarningsManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/EarningsManager.sol:17"
            },
            {
              "contract": "EarningsManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)8913",
              "src": "contracts/uniswapv2/EarningsManager.sol:18"
            },
            {
              "contract": "EarningsManager",
              "label": "swapPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/EarningsManager.sol:19"
            },
            {
              "contract": "EarningsManager",
              "label": "swapIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/EarningsManager.sol:20"
            },
            {
              "contract": "EarningsManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/EarningsManager.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IUniswapV2Factory)8913": {
              "label": "contract IUniswapV2Factory"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FeeManager": {
        "src": "contracts/uniswapv2/FeeManager.sol:13",
        "version": {
          "withMetadata": "2534e4ccecb82fd3aff75e00c4febba45aceeff486ed6af02d63b67882f979a1",
          "withoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c",
          "linkedWithoutMetadata": "1bab06a4229df15e72712b30949e56659ddc7a2fb5c73344226b38441ecd8f8c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "adjustWhitelist(address,bool)",
          "catalougeTokens(address,address)",
          "deposit()",
          "validTimeWindow(address)",
          "oracleStepSwap(address,bool)",
          "manualStepSwap(address,bool,uint256)",
          "adminWithdraw(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FeeManager",
            "src": "contracts/uniswapv2/FeeManager.sol:64"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FeeManager",
              "label": "tokenList",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/FeeManager.sol:14"
            },
            {
              "contract": "FeeManager",
              "label": "tokenIndex",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/FeeManager.sol:15"
            },
            {
              "contract": "FeeManager",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/FeeManager.sol:16"
            },
            {
              "contract": "FeeManager",
              "label": "whitelist",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/uniswapv2/FeeManager.sol:17"
            },
            {
              "contract": "FeeManager",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)8913",
              "src": "contracts/uniswapv2/FeeManager.sol:18"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_contract(IUniswapV2Factory)8913": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PathOracle": {
        "src": "contracts/uniswapv2/PathOracle.sol:11",
        "version": {
          "withMetadata": "d3d5c7298808f8753384a103f375b0849f7a99d5753c803f7e62c5f2b5157a41",
          "withoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86",
          "linkedWithoutMetadata": "4fa4dc23ca95ab7f4adbd1608806159261e5df85113bf4a84ed5b5c4e3c6bd86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256)",
          "alterPath(address,address)",
          "stepPath(address)",
          "setFactory(address)",
          "appendPath(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PathOracle",
            "src": "contracts/uniswapv2/PathOracle.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PathOracle",
              "label": "pathMap",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/uniswapv2/PathOracle.sol:12"
            },
            {
              "contract": "PathOracle",
              "label": "favoredAssets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/PathOracle.sol:13"
            },
            {
              "contract": "PathOracle",
              "label": "favoredLength",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PathOracle.sol:14"
            },
            {
              "contract": "PathOracle",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/PathOracle.sol:15"
            },
            {
              "contract": "PathOracle",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)8913",
              "src": "contracts/uniswapv2/PathOracle.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IUniswapV2Factory)8913": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/uniswapv2/PriceOracle.sol:10",
        "version": {
          "withMetadata": "99cadf23d5a0bee7cb22540403f30af49687fada413c414a7ccad0aa239a885d",
          "withoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1",
          "linkedWithoutMetadata": "1db633261eff19018e182b24ab6e74c42a9c2e815b6cbf328850fb6e6def24a1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "UQ112x112"
        ],
        "methods": [
          "(uint256,uint256)",
          "setTimingReq(uint256,uint256)",
          "getPrice(address)",
          "getOracleTime(address)",
          "calculateMinAmount(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceOracle",
            "src": "contracts/uniswapv2/PriceOracle.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "priceOracles",
              "type": "t_mapping(t_address,t_struct(oracle)7733_storage)",
              "src": "contracts/uniswapv2/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidStart",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:27"
            },
            {
              "contract": "PriceOracle",
              "label": "priceValidEnd",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/PriceOracle.sol:28"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(oracle)7733_storage)": {
              "label": "mapping(address => struct PriceOracle.oracle)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(oracle)7733_storage": {
              "label": "struct PriceOracle.oracle",
              "members": [
                {
                  "label": "price0Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "price1Cumulative",
                  "type": "t_array(t_uint256)2_storage"
                },
                {
                  "label": "timeStamp",
                  "type": "t_array(t_uint32)2_storage"
                },
                {
                  "label": "index",
                  "type": "t_uint8"
                }
              ]
            },
            "t_array(t_uint256)2_storage": {
              "label": "uint256[2]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint32)2_storage": {
              "label": "uint32[2]"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "a70b2695560de67101d8a9367a7c827d44f6edcc58231cf66946742304f302f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "2d99c68e0bd8378359958804f08056f2b60dcad59dba4f0910e217a0ef5f77f3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/uniswapv2/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/uniswapv2/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/uniswapv2/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/uniswapv2/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts/Flat_GFIFarm.sol:146",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Farm_Contract": {
        "src": "contracts/Flat_GFIFarm.sol:231",
        "version": {
          "withMetadata": "6e6f586de46a89bce947e1705091446cbce76d11d32b61b943ad7032a7c6463a",
          "withoutMetadata": "211d44f052dd000472f4503435fd44d4609a8b4c4f167cc1087aec533b163e84",
          "linkedWithoutMetadata": "211d44f052dd000472f4503435fd44d4609a8b4c4f167cc1087aec533b163e84"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "TransferHelper"
        ],
        "methods": [
          "init(address,uint256,address,uint256,uint256,uint256,uint256,uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingReward(address)",
          "updatePool()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw()",
          "withdrawRewards(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Farm_Contract",
              "label": "farmInfo",
              "type": "t_struct(FarmInfo)498_storage",
              "src": "contracts/Flat_GFIFarm.sol:253"
            },
            {
              "contract": "Farm_Contract",
              "label": "userInfo",
              "type": "t_mapping(t_address,t_struct(UserInfo)475_storage)",
              "src": "contracts/Flat_GFIFarm.sol:255"
            }
          ],
          "types": {
            "t_struct(FarmInfo)498_storage": {
              "label": "struct Farm_Contract.FarmInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)334"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)334"
                },
                {
                  "label": "startBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "blockReward",
                  "type": "t_uint256"
                },
                {
                  "label": "bonusEndBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "bonus",
                  "type": "t_uint256"
                },
                {
                  "label": "endBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "farmableSupply",
                  "type": "t_uint256"
                },
                {
                  "label": "numFarmers",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(IERC20)334": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(UserInfo)475_storage)": {
              "label": "mapping(address => struct Farm_Contract.UserInfo)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(UserInfo)475_storage": {
              "label": "struct Farm_Contract.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/Flat_GFIFarm.sol:103",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "transfer(address,uint256)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/Flat_GFIFarm.sol:176",
        "version": {
          "withMetadata": "29e0f9210cba0f7def0618e82d9f4d586b73d3c7275977db15151783e905fd62",
          "withoutMetadata": "562c0b4b1308a3806a6218c54a3add1df8b21c65d35f7156b5920ac797c97904",
          "linkedWithoutMetadata": "562c0b4b1308a3806a6218c54a3add1df8b21c65d35f7156b5920ac797c97904"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/Flat_GFIFarm.sol:184"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/Flat_GFIFarm.sol:177"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts/Flat_GFIFarm.sol:12",
        "version": {
          "withMetadata": "689ddad274871e575c4370dba0c70491f1ba6f636284cbf36ce8746bc9a97e34",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/Flat_GFIFarm.sol:77",
        "version": {
          "withMetadata": "15d7d74eafec25b7b7706de1d1bb480f56a197c938fc369c4d5cfeb5709b0103",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "CalHash": {
        "src": "contracts/CalHash.sol:5",
        "version": {
          "withMetadata": "70e34cb1f89bb050be3941a0c21d57c52633c93a7445cd0c90d7c0dba749b8e5",
          "withoutMetadata": "f2f204b3936f27c34626f8676bbd146db009d32e1f9278b2ae333a05f16e87e3",
          "linkedWithoutMetadata": "f2f204b3936f27c34626f8676bbd146db009d32e1f9278b2ae333a05f16e87e3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getInitHash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OZ_IERC20": {
        "src": "contracts/interfaces/OZ_IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Holding": {
        "src": "contracts/uniswapv2/Holding.sol:19",
        "version": {
          "withMetadata": "74e8054540a7a4fcb25831a5bfe78e94b0656ff1eb4d7a349abefc045214b110",
          "withoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659",
          "linkedWithoutMetadata": "bc7be31ead7b542eb43fc7e4d26c5596a762d2dbab7d1021aa1a60b572ac5659"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Holding",
            "src": "contracts/uniswapv2/Holding.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Holding",
              "label": "SWAP_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/Holding.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2ERC20": {
        "src": "contracts/uniswapv2/UniswapV2ERC20.sol:7",
        "version": {
          "withMetadata": "a064e8ae81fb7adc88755d7e70e2d8b65cc23c0c54823daefd371fc4f6d8598c",
          "withoutMetadata": "ec4e7411e1d2cb91d8281332fca12bb1a35775b52a9c9180a648b89db5ac0ae0",
          "linkedWithoutMetadata": "ec4e7411e1d2cb91d8281332fca12bb1a35775b52a9c9180a648b89db5ac0ae0"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "contracts/uniswapv2/UniswapV2ERC20.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:15"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:17"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/uniswapv2/UniswapV2ERC20.sol:20"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "contracts/uniswapv2/UniswapV2Factory.sol:11",
        "version": {
          "withMetadata": "b7581f102b14797dce47e95bf706ef7ae9b5e5507d058f90dde08018bdc929dd",
          "withoutMetadata": "e3acdbe6f95ffa248012067f2b686a1132dfbf76c2e595742784c85b64c19f6c",
          "linkedWithoutMetadata": "e3acdbe6f95ffa248012067f2b686a1132dfbf76c2e595742784c85b64c19f6c"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "allPairsLength()",
          "pairCodeHash()",
          "createPair(address,address)",
          "setMigrator(address)",
          "setFeeToSetter(address)",
          "setRouter(address)",
          "setGovernor(address)",
          "setPathOracle(address)",
          "setPriceOracle(address)",
          "setEarningsManager(address)",
          "setFeeManager(address)",
          "setDustPan(address)",
          "setPaused(bool)",
          "setSlippage(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "contracts/uniswapv2/UniswapV2Factory.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:14"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "migrator",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:15"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "router",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:16"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "governor",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:17"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "weth",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:18"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "wbtc",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:19"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "gfi",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:20"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "pathOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:21"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:22"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "earningsManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:23"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeManager",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:24"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "dustPan",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:25"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:26"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "slippage",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:27"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:29"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/uniswapv2/UniswapV2Factory.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigrator": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "desiredLiquidity()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "contracts/uniswapv2/UniswapV2Pair.sol:21",
        "version": {
          "withMetadata": "8fd371889be7091020a41ce6875178d21866ac4501c6c47c6d1062d600dc6e6d",
          "withoutMetadata": "1b9ec7165fa4c141929553899b9307b2ff4efcd768d5fbb4b9ab32da716cc6db",
          "linkedWithoutMetadata": "1b9ec7165fa4c141929553899b9307b2ff4efcd768d5fbb4b9ab32da716cc6db"
        },
        "inherit": [
          "UniswapV2ERC20"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "handleEarnings()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:83"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:29"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:30"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:32"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:33"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:34"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:36"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:37"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:38"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:40"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "holder",
              "type": "t_contract(Holding)160",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:43"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "HOLDING_ADDRESS",
              "type": "t_address",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:44"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "Factory",
              "type": "t_contract(IUniswapV2Factory)4793",
              "src": "contracts/uniswapv2/UniswapV2Pair.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(Holding)160": {
              "label": "contract Holding"
            },
            "t_contract(IUniswapV2Factory)4793": {
              "label": "contract IUniswapV2Factory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "contracts/uniswapv2/UniswapV2Router02.sol:13",
        "version": {
          "withMetadata": "ea75be8af45cc277ae61549b2c144f9f2360e7a9c7f55d8d6e3468ed9f2abf5d",
          "withoutMetadata": "e0888531b5f490177c70b2101bbda90180e2d1ac9ac9816d71c2040ef910cccd",
          "linkedWithoutMetadata": "e0888531b5f490177c70b2101bbda90180e2d1ac9ac9816d71c2040ef910cccd"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMathUniswap",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/uniswapv2/UniswapV2Router02.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Uniswap": {
        "src": "contracts/uniswapv2/interfaces/IERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IEarningsManager": {
        "src": "contracts/uniswapv2/interfaces/IEarningsManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addSwapPair(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFeeManager": {
        "src": "contracts/uniswapv2/interfaces/IFeeManager.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "catalougeTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IHolding": {
        "src": "contracts/uniswapv2/interfaces/IHolding.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approveEM(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPathOracle": {
        "src": "contracts/uniswapv2/interfaces/IPathOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "appendPath(address,address)",
          "stepPath(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/uniswapv2/interfaces/IPriceOracle.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(address)",
          "calculateMinAmount(address,uint256,uint256,address)",
          "getOracleTime(address)",
          "priceValidStart()",
          "priceValidEnd()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Callee.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "burn(uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Factory.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeToSetter()",
          "migrator()",
          "weth()",
          "wbtc()",
          "gfi()",
          "earningsManager()",
          "feeManager()",
          "dustPan()",
          "governor()",
          "priceOracle()",
          "pathOracle()",
          "router()",
          "paused()",
          "slippage()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeToSetter(address)",
          "setMigrator(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "HOLDING_ADDRESS()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)",
          "handleEarnings()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts/uniswapv2/interfaces/IUniswapV2Router02.sol:7",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts/uniswapv2/interfaces/IWETH.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "iGovernance": {
        "src": "contracts/uniswapv2/interfaces/iGovernance.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "delegateFee(address)",
          "depositFee(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts/uniswapv2/libraries/Math.sol:7",
        "version": {
          "withMetadata": "57dd454c6ffc469a4b555e3177db66712c2e58d3ab56d6ef04ed3d4ba2da3574",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUniswap": {
        "src": "contracts/uniswapv2/libraries/SafeMath.sol:7",
        "version": {
          "withMetadata": "e65dd81bbd15470d9e134c032c8bd0843df73205d6394b7bdc66471f0aeaa8aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts/uniswapv2/libraries/TransferHelper.sol:6",
        "version": {
          "withMetadata": "017dc8885cfd9477656c39d26fb8ccb23f90e9b5bd6c40f4e57bf4e50c5c70e4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts/uniswapv2/libraries/UQ112x112.sol:10",
        "version": {
          "withMetadata": "267b3bf100191fd9e90acc6f6f6c29ca35925be2c48e9ceeb486bfa2fb5e5ee2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts/uniswapv2/libraries/UniswapV2Library.sol:9",
        "version": {
          "withMetadata": "e04736b6a5d4eae34d5b1ea15f71d5fa57231ca704c6d0f5b3ceb7e6be5dbbc6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUniswap"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}